; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Tools\DEV\Workspace\cpprimer\CPPrimer\cpprimer\ch7_exAll.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
_Seazon	DB	'Spring', 00H
	ORG $+1
	DB	'Summer', 00H
	ORG $+1
	DB	'Fall', 00H
	ORG $+3
	DB	'Winter', 00H
	ORG $+1
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_C@_0CH@LMKJBGPL@Select?5next?5exercise?5to?5debug?0?5m@ ; `string'
PUBLIC	??_C@_0BD@NNCHOOFB@Invalid?0?5reselect?6?$AA@	; `string'
PUBLIC	??_C@_0BB@MECCMDLN@Fare?5thee?5well?$CB?6?$AA@	; `string'
PUBLIC	?ch7_ex10@@YAXXZ				; ch7_ex10
PUBLIC	?ch7_ex9@@YAXXZ					; ch7_ex9
PUBLIC	?ch7_ex8@@YAXXZ					; ch7_ex8
PUBLIC	?ch7_ex7@@YAXXZ					; ch7_ex7
PUBLIC	?ch7_ex6@@YAXXZ					; ch7_ex6
PUBLIC	?ch7_ex5@@YAXXZ					; ch7_ex5
PUBLIC	?ch7_ex4@@YAXXZ					; ch7_ex4
PUBLIC	?ch7_ex3@@YAXH@Z				; ch7_ex3
PUBLIC	??_C@_0CB@NNMNFDDL@Pass?5by?5?$CI1?$CJValue?5or?5?$CI2?$CJAddress?3?5@ ; `string'
PUBLIC	?ch7_ex2@@YAXXZ					; ch7_ex2
PUBLIC	?ch7_ex1@@YAXXZ					; ch7_ex1
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_0CC@JLLNEAGF@Select?5exercise?5to?5debug?0?5chump?3@ ; `string'
PUBLIC	_main
EXTRN	__imp_??Bios_base@std@@QBEPAXXZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0CH@LMKJBGPL@Select?5next?5exercise?5to?5debug?0?5m@
; File d:\tools\dev\workspace\cpprimer\cpprimer\cpprimer\ch7_exall.cpp
CONST	SEGMENT
??_C@_0CH@LMKJBGPL@Select?5next?5exercise?5to?5debug?0?5m@ DB 'Select nex'
	DB	't exercise to debug, merci: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NNCHOOFB@Invalid?0?5reselect?6?$AA@
CONST	SEGMENT
??_C@_0BD@NNCHOOFB@Invalid?0?5reselect?6?$AA@ DB 'Invalid, reselect', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MECCMDLN@Fare?5thee?5well?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BB@MECCMDLN@Fare?5thee?5well?$CB?6?$AA@ DB 'Fare thee well!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NNMNFDDL@Pass?5by?5?$CI1?$CJValue?5or?5?$CI2?$CJAddress?3?5@
CONST	SEGMENT
??_C@_0CB@NNMNFDDL@Pass?5by?5?$CI1?$CJValue?5or?5?$CI2?$CJAddress?3?5@ DB 'P'
	DB	'ass by (1)Value or (2)Address: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JLLNEAGF@Select?5exercise?5to?5debug?0?5chump?3@
CONST	SEGMENT
??_C@_0CC@JLLNEAGF@Select?5exercise?5to?5debug?0?5chump?3@ DB 'Select exe'
	DB	'rcise to debug, chump: ', 00H		; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _main
_TEXT	SEGMENT
tv81 = -232						; size = 4
$T40243 = -224						; size = 4
_choice$32230 = -20					; size = 4
_chapter$ = -8						; size = 4
_main	PROC						; COMDAT

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 22   : 	int chapter;
; 23   : 
; 24   : 	cout << "Select exercise to debug, chump: ";

	push	OFFSET ??_C@_0CC@JLLNEAGF@Select?5exercise?5to?5debug?0?5chump?3@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN16@main:

; 25   : 
; 26   : 	while (cin >> chapter)

	mov	esi, esp
	lea	eax, DWORD PTR _chapter$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40243[ebp], eax
	mov	ecx, DWORD PTR $T40243[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T40243[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN15@main

; 27   : 	{
; 28   : 		switch (chapter)

	mov	eax, DWORD PTR _chapter$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 112		; 00000070H
	ja	$LN1@main
	mov	edx, DWORD PTR tv81[ebp]
	movzx	eax, BYTE PTR $LN19@main[edx]
	jmp	DWORD PTR $LN24@main[eax*4]
$LN12@main:

; 29   : 		{
; 30   : 			case 1: ch7_ex1(); break;

	call	?ch7_ex1@@YAXXZ				; ch7_ex1
	jmp	$LN13@main
$LN11@main:

; 31   : 			case 2: ch7_ex2(); break;

	call	?ch7_ex2@@YAXXZ				; ch7_ex2
	jmp	$LN13@main
$LN10@main:

; 32   : 			case 3: 
; 33   : 				{
; 34   : 					int choice;
; 35   : 					cout << "Pass by (1)Value or (2)Address: ";

	push	OFFSET ??_C@_0CB@NNMNFDDL@Pass?5by?5?$CI1?$CJValue?5or?5?$CI2?$CJAddress?3?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 36   : 					cin >> choice;

	mov	esi, esp
	lea	eax, DWORD PTR _choice$32230[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   : 					ch7_ex3(choice); 

	mov	eax, DWORD PTR _choice$32230[ebp]
	push	eax
	call	?ch7_ex3@@YAXH@Z			; ch7_ex3
	add	esp, 4

; 38   : 					break;

	jmp	SHORT $LN13@main
$LN9@main:

; 39   : 				}
; 40   : 			case 4: ch7_ex4(); break;

	call	?ch7_ex4@@YAXXZ				; ch7_ex4
	jmp	SHORT $LN13@main
$LN8@main:

; 41   : 			case 5: ch7_ex5(); break;

	call	?ch7_ex5@@YAXXZ				; ch7_ex5
	jmp	SHORT $LN13@main
$LN7@main:

; 42   : 			case 6: ch7_ex6(); break;

	call	?ch7_ex6@@YAXXZ				; ch7_ex6
	jmp	SHORT $LN13@main
$LN6@main:

; 43   : 			case 7: ch7_ex7(); break;

	call	?ch7_ex7@@YAXXZ				; ch7_ex7
	jmp	SHORT $LN13@main
$LN5@main:

; 44   : 			case 8: ch7_ex8(); break;

	call	?ch7_ex8@@YAXXZ				; ch7_ex8
	jmp	SHORT $LN13@main
$LN4@main:

; 45   : 			case 9: ch7_ex9(); break;

	call	?ch7_ex9@@YAXXZ				; ch7_ex9
	jmp	SHORT $LN13@main
$LN3@main:

; 46   : 			case 10: ch7_ex10(); break;

	call	?ch7_ex10@@YAXXZ			; ch7_ex10
	jmp	SHORT $LN13@main
$LN2@main:

; 47   : 			case 'q':
; 48   : 			case 'Q': cout << "Fare thee well!\n"; break;

	push	OFFSET ??_C@_0BB@MECCMDLN@Fare?5thee?5well?$CB?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	jmp	SHORT $LN13@main
$LN1@main:

; 49   : 			default : cout << "Invalid, reselect\n";

	push	OFFSET ??_C@_0BD@NNCHOOFB@Invalid?0?5reselect?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN13@main:

; 50   : 		}
; 51   : 		cout << "Select next exercise to debug, merci: ";

	push	OFFSET ??_C@_0CH@LMKJBGPL@Select?5next?5exercise?5to?5debug?0?5m@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 52   : 	}	

	jmp	$LN16@main
$LN15@main:

; 53   : 	return 0;

	xor	eax, eax

; 54   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@main:
	DD	2
	DD	$LN22@main
$LN22@main:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN20@main
	DD	-20					; ffffffecH
	DD	4
	DD	$LN21@main
$LN21@main:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN20@main:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN24@main:
	DD	$LN12@main
	DD	$LN11@main
	DD	$LN10@main
	DD	$LN9@main
	DD	$LN8@main
	DD	$LN7@main
	DD	$LN6@main
	DD	$LN5@main
	DD	$LN4@main
	DD	$LN3@main
	DD	$LN2@main
	DD	$LN1@main
$LN19@main:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
_main	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@MMJKFGBI@Bring?5harmony?5to?5the?5digits?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BA@KAAKCAGP@Harmonic?5Mean?3?5?$AA@	; `string'
PUBLIC	?harmony@@YANNN@Z				; harmony
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_0CO@IEFDGGAD@Enter?5two?5values?5to?5be?5evaluated@ ; `string'
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BO@MMJKFGBI@Bring?5harmony?5to?5the?5digits?3?5?$AA@
CONST	SEGMENT
??_C@_0BO@MMJKFGBI@Bring?5harmony?5to?5the?5digits?3?5?$AA@ DB 'Bring har'
	DB	'mony to the digits: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KAAKCAGP@Harmonic?5Mean?3?5?$AA@
CONST	SEGMENT
??_C@_0BA@KAAKCAGP@Harmonic?5Mean?3?5?$AA@ DB 'Harmonic Mean: ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0CO@IEFDGGAD@Enter?5two?5values?5to?5be?5evaluated@
CONST	SEGMENT
??_C@_0CO@IEFDGGAD@Enter?5two?5values?5to?5be?5evaluated@ DB 'Enter two v'
	DB	'alues to be evaluated to harmony: ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex1@@YAXXZ
_TEXT	SEGMENT
$T40262 = -248						; size = 4
_mean$32266 = -44					; size = 8
_yval$ = -28						; size = 8
_xval$ = -12						; size = 8
?ch7_ex1@@YAXXZ PROC					; ch7_ex1, COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 59   : 	double xval, yval;
; 60   : 	
; 61   : 	cout << "Enter two values to be evaluated to harmony: ";

	push	OFFSET ??_C@_0CO@IEFDGGAD@Enter?5two?5values?5to?5be?5evaluated@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN3@ch7_ex1:

; 62   : 	while ((cin >> xval >> yval))

	mov	esi, esp
	lea	eax, DWORD PTR _yval$[ebp]
	push	eax
	mov	edi, esp
	lea	ecx, DWORD PTR _xval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40262[ebp], eax
	mov	edx, DWORD PTR $T40262[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40262[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN2@ch7_ex1

; 63   : 	{
; 64   : 		if (xval == 0 && yval == 0)

	fld	QWORD PTR _xval$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@ch7_ex1
	fld	QWORD PTR _yval$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@ch7_ex1

; 65   : 			break;

	jmp	SHORT $LN2@ch7_ex1
$LN1@ch7_ex1:

; 66   : 
; 67   : 		double mean = harmony(xval, yval);

	sub	esp, 8
	fld	QWORD PTR _yval$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _xval$[ebp]
	fstp	QWORD PTR [esp]
	call	?harmony@@YANNN@Z			; harmony
	add	esp, 16					; 00000010H
	fstp	QWORD PTR _mean$32266[ebp]

; 68   : 
; 69   : 		cout << "Harmonic Mean: " << mean << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	sub	esp, 8
	fld	QWORD PTR _mean$32266[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BA@KAAKCAGP@Harmonic?5Mean?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 70   : 		cout << "Bring harmony to the digits: ";

	push	OFFSET ??_C@_0BO@MMJKFGBI@Bring?5harmony?5to?5the?5digits?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 71   : 	}

	jmp	$LN3@ch7_ex1
$LN2@ch7_ex1:

; 72   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ch7_ex1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@ch7_ex1:
	DD	2
	DD	$LN8@ch7_ex1
$LN8@ch7_ex1:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN6@ch7_ex1
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN7@ch7_ex1
$LN7@ch7_ex1:
	DB	121					; 00000079H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN6@ch7_ex1:
	DB	120					; 00000078H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?ch7_ex1@@YAXXZ ENDP					; ch7_ex1
_TEXT	ENDS
PUBLIC	??_C@_01IPJKGB@?$CD?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	?golfread@@YAPAHH@Z				; golfread
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
;	COMDAT ??_C@_01IPJKGB@?$CD?$AA@
CONST	SEGMENT
??_C@_01IPJKGB@?$CD?$AA@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex2@@YAXXZ
_TEXT	SEGMENT
_x$32297 = -32						; size = 4
_values$ = -20						; size = 4
_arsize$ = -8						; size = 4
?ch7_ex2@@YAXXZ PROC					; ch7_ex2, COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 75   : 	const int arsize = 10;

	mov	DWORD PTR _arsize$[ebp], 10		; 0000000aH

; 76   : 
; 77   : 	int * values = golfread(arsize);

	push	10					; 0000000aH
	call	?golfread@@YAPAHH@Z			; golfread
	add	esp, 4
	mov	DWORD PTR _values$[ebp], eax

; 78   : 
; 79   : 	for (int x = 0; x < arsize; x++)

	mov	DWORD PTR _x$32297[ebp], 0
	jmp	SHORT $LN3@ch7_ex2
$LN2@ch7_ex2:
	mov	eax, DWORD PTR _x$32297[ebp]
	add	eax, 1
	mov	DWORD PTR _x$32297[ebp], eax
$LN3@ch7_ex2:
	cmp	DWORD PTR _x$32297[ebp], 10		; 0000000aH
	jge	SHORT $LN4@ch7_ex2

; 80   : 		cout << "#" << x+1 << ": " << values[x] << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _x$32297[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	ecx, DWORD PTR _x$32297[ebp]
	add	ecx, 1
	mov	ebx, esp
	push	ecx
	push	OFFSET ??_C@_01IPJKGB@?$CD?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@ch7_ex2
$LN4@ch7_ex2:

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ch7_ex2@@YAXXZ ENDP					; ch7_ex2
_TEXT	ENDS
PUBLIC	??_C@_0BB@PBFHBIMO@Constructed?5by?3?7?$AA@	; `string'
PUBLIC	??_C@_09KPCJIOPG@Height?3?7?7?$AA@		; `string'
PUBLIC	??_C@_08MHOMPPNA@Width?3?7?7?$AA@		; `string'
PUBLIC	??_C@_09HNADJPPG@Length?3?7?7?$AA@		; `string'
PUBLIC	??_C@_09LGIMBJDB@Volume?3?7?7?$AA@		; `string'
PUBLIC	??_C@_0BM@IKHFKFPF@Box?5struct?5passed?5by?5value?6?$AA@ ; `string'
PUBLIC	?vshowbox@@YAHUbox@@@Z				; vshowbox
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:PROC
;	COMDAT ??_C@_0BB@PBFHBIMO@Constructed?5by?3?7?$AA@
CONST	SEGMENT
??_C@_0BB@PBFHBIMO@Constructed?5by?3?7?$AA@ DB 'Constructed by:', 09H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPCJIOPG@Height?3?7?7?$AA@
CONST	SEGMENT
??_C@_09KPCJIOPG@Height?3?7?7?$AA@ DB 'Height:', 09H, 09H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MHOMPPNA@Width?3?7?7?$AA@
CONST	SEGMENT
??_C@_08MHOMPPNA@Width?3?7?7?$AA@ DB 'Width:', 09H, 09H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HNADJPPG@Length?3?7?7?$AA@
CONST	SEGMENT
??_C@_09HNADJPPG@Length?3?7?7?$AA@ DB 'Length:', 09H, 09H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGIMBJDB@Volume?3?7?7?$AA@
CONST	SEGMENT
??_C@_09LGIMBJDB@Volume?3?7?7?$AA@ DB 'Volume:', 09H, 09H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IKHFKFPF@Box?5struct?5passed?5by?5value?6?$AA@
CONST	SEGMENT
??_C@_0BM@IKHFKFPF@Box?5struct?5passed?5by?5value?6?$AA@ DB 'Box struct p'
	DB	'assed by value', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?vshowbox@@YAHUbox@@@Z
_TEXT	SEGMENT
tv201 = -228						; size = 4
tv199 = -224						; size = 4
tv197 = -220						; size = 4
tv195 = -216						; size = 4
tv193 = -212						; size = 4
tv191 = -208						; size = 4
_byval$ = 8						; size = 56
?vshowbox@@YAHUbox@@@Z PROC				; vshowbox, COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 93   : 	cout << "Box struct passed by value\n";

	push	OFFSET ??_C@_0BM@IKHFKFPF@Box?5struct?5passed?5by?5value?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 94   : 	cout << "Constructed by:\t" << byval.maker << endl
; 95   : 		 << "Height:\t\t" << byval.height << endl
; 96   : 		 << "Width:\t\t" << byval.width << endl
; 97   : 		 << "Length:\t\t" << byval.length << endl
; 98   : 		 << "Volume:\t\t" << byval.volume << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	push	ecx
	fld	DWORD PTR _byval$[ebp+52]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_09LGIMBJDB@Volume?3?7?7?$AA@
	mov	ebx, esp
	mov	ecx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	ecx
	mov	eax, esp
	push	ecx
	fld	DWORD PTR _byval$[ebp+48]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_09HNADJPPG@Length?3?7?7?$AA@
	mov	ecx, esp
	mov	edx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edx
	mov	edx, esp
	push	ecx
	fld	DWORD PTR _byval$[ebp+44]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_08MHOMPPNA@Width?3?7?7?$AA@
	mov	DWORD PTR tv191[ebp], esi
	mov	esi, esp
	mov	DWORD PTR tv193[ebp], edi
	mov	edi, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edi
	mov	edi, esp
	push	ecx
	fld	DWORD PTR _byval$[ebp+40]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_09KPCJIOPG@Height?3?7?7?$AA@
	mov	DWORD PTR tv195[ebp], ebx
	mov	ebx, esp
	mov	DWORD PTR tv197[ebp], eax
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	eax, DWORD PTR _byval$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@PBFHBIMO@Constructed?5by?3?7?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	mov	DWORD PTR tv199[ebp], ecx
	mov	DWORD PTR tv201[ebp], edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	esi, DWORD PTR tv201[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv199[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	esi, DWORD PTR tv197[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv195[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	esi, DWORD PTR tv193[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv191[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 
; 100  : 	return 0;

	xor	eax, eax

; 101  : } 

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@vshowbox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@vshowbox:
	DD	1
	DD	$LN4@vshowbox
$LN4@vshowbox:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@vshowbox
$LN3@vshowbox:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?vshowbox@@YAHUbox@@@Z ENDP				; vshowbox
_TEXT	ENDS
PUBLIC	??_C@_0BO@IDGAPBNN@Box?5struct?5passed?5by?5Pointer?6?$AA@ ; `string'
PUBLIC	?pshowbox@@YAHPBUbox@@@Z			; pshowbox
;	COMDAT ??_C@_0BO@IDGAPBNN@Box?5struct?5passed?5by?5Pointer?6?$AA@
CONST	SEGMENT
??_C@_0BO@IDGAPBNN@Box?5struct?5passed?5by?5Pointer?6?$AA@ DB 'Box struct'
	DB	' passed by Pointer', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?pshowbox@@YAHPBUbox@@@Z
_TEXT	SEGMENT
tv209 = -216						; size = 4
tv207 = -212						; size = 4
tv205 = -208						; size = 4
tv203 = -204						; size = 4
tv201 = -200						; size = 4
tv199 = -196						; size = 4
_byaddr$ = 8						; size = 4
?pshowbox@@YAHPBUbox@@@Z PROC				; pshowbox, COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	cout << "Box struct passed by Pointer\n";

	push	OFFSET ??_C@_0BO@IDGAPBNN@Box?5struct?5passed?5by?5Pointer?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 106  : 	cout << "Constructed by:\t" << byaddr->maker << endl
; 107  : 		 << "Height:\t\t" << byaddr->height << endl
; 108  : 		 << "Width:\t\t" << byaddr->width << endl
; 109  : 		 << "Length:\t\t" << byaddr->length << endl
; 110  : 		 << "Volume:\t\t" << byaddr->volume << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _byaddr$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+52]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_09LGIMBJDB@Volume?3?7?7?$AA@
	mov	ebx, esp
	mov	edx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edx
	mov	eax, esp
	mov	ecx, DWORD PTR _byaddr$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+48]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_09HNADJPPG@Length?3?7?7?$AA@
	mov	ecx, esp
	mov	edx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edx
	mov	edx, esp
	mov	DWORD PTR tv199[ebp], esi
	mov	esi, DWORD PTR _byaddr$[ebp]
	push	ecx
	fld	DWORD PTR [esi+44]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_08MHOMPPNA@Width?3?7?7?$AA@
	mov	esi, esp
	mov	DWORD PTR tv201[ebp], edi
	mov	edi, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edi
	mov	edi, esp
	mov	DWORD PTR tv203[ebp], ebx
	mov	ebx, DWORD PTR _byaddr$[ebp]
	push	ecx
	fld	DWORD PTR [ebx+40]
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_09KPCJIOPG@Height?3?7?7?$AA@
	mov	ebx, esp
	mov	DWORD PTR tv205[ebp], eax
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	eax, DWORD PTR _byaddr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@PBFHBIMO@Constructed?5by?3?7?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	mov	DWORD PTR tv207[ebp], ecx
	mov	DWORD PTR tv209[ebp], edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	esi, DWORD PTR tv209[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv207[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	esi, DWORD PTR tv205[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv203[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
	mov	esi, DWORD PTR tv201[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	mov	esi, DWORD PTR tv199[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  : 	
; 112  : 	return 0;

	xor	eax, eax

; 113  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pshowbox@@YAHPBUbox@@@Z ENDP				; pshowbox
_TEXT	ENDS
PUBLIC	__real@41900000
PUBLIC	__real@41580000
PUBLIC	__real@40b66666
PUBLIC	??_C@_06OJKEAEDO@Jipeto?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41580000
CONST	SEGMENT
__real@41580000 DD 041580000r			; 13.5
CONST	ENDS
;	COMDAT __real@40b66666
CONST	SEGMENT
__real@40b66666 DD 040b66666r			; 5.7
CONST	ENDS
;	COMDAT ??_C@_06OJKEAEDO@Jipeto?$AA@
CONST	SEGMENT
??_C@_06OJKEAEDO@Jipeto?$AA@ DB 'Jipeto', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex3@@YAXH@Z
_TEXT	SEGMENT
_mybox$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
_choice$ = 8						; size = 4
?ch7_ex3@@YAXH@Z PROC					; ch7_ex3, COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 116  : 	box mybox =
; 117  : 	{
; 118  : 		"Jipeto",

	mov	eax, DWORD PTR ??_C@_06OJKEAEDO@Jipeto?$AA@
	mov	DWORD PTR _mybox$[ebp], eax
	mov	cx, WORD PTR ??_C@_06OJKEAEDO@Jipeto?$AA@+4
	mov	WORD PTR _mybox$[ebp+4], cx
	mov	dl, BYTE PTR ??_C@_06OJKEAEDO@Jipeto?$AA@+6
	mov	BYTE PTR _mybox$[ebp+6], dl
	xor	eax, eax
	mov	DWORD PTR _mybox$[ebp+7], eax
	mov	DWORD PTR _mybox$[ebp+11], eax
	mov	DWORD PTR _mybox$[ebp+15], eax
	mov	DWORD PTR _mybox$[ebp+19], eax
	mov	DWORD PTR _mybox$[ebp+23], eax
	mov	DWORD PTR _mybox$[ebp+27], eax
	mov	DWORD PTR _mybox$[ebp+31], eax
	mov	DWORD PTR _mybox$[ebp+35], eax
	mov	BYTE PTR _mybox$[ebp+39], al

; 119  : 		5.7,

	fld	DWORD PTR __real@40b66666
	fstp	DWORD PTR _mybox$[ebp+40]

; 120  : 		13.5,

	fld	DWORD PTR __real@41580000
	fstp	DWORD PTR _mybox$[ebp+44]

; 121  : 		18,

	fld	DWORD PTR __real@41900000
	fstp	DWORD PTR _mybox$[ebp+48]

; 122  : 		mybox.height * mybox.width * mybox.length
; 123  : 	};

	fld	DWORD PTR _mybox$[ebp+40]
	fmul	DWORD PTR _mybox$[ebp+44]
	fmul	DWORD PTR _mybox$[ebp+48]
	fstp	DWORD PTR _mybox$[ebp+52]

; 124  : 
; 125  : 	if (choice == 1)

	cmp	DWORD PTR _choice$[ebp], 1
	jne	SHORT $LN3@ch7_ex3

; 126  : 		vshowbox(mybox);

	sub	esp, 56					; 00000038H
	mov	ecx, 14					; 0000000eH
	lea	esi, DWORD PTR _mybox$[ebp]
	mov	edi, esp
	rep movsd
	call	?vshowbox@@YAHUbox@@@Z			; vshowbox
	add	esp, 56					; 00000038H
	jmp	SHORT $LN1@ch7_ex3
$LN3@ch7_ex3:

; 127  : 	else if (choice == 2)

	cmp	DWORD PTR _choice$[ebp], 2
	jne	SHORT $LN1@ch7_ex3

; 128  : 		pshowbox(&mybox);

	lea	eax, DWORD PTR _mybox$[ebp]
	push	eax
	call	?pshowbox@@YAHPBUbox@@@Z		; pshowbox
	add	esp, 4
$LN1@ch7_ex3:

; 129  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ch7_ex3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@ch7_ex3:
	DD	1
	DD	$LN7@ch7_ex3
$LN7@ch7_ex3:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN6@ch7_ex3
$LN6@ch7_ex3:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
?ch7_ex3@@YAXH@Z ENDP					; ch7_ex3
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?probability@@YAOIIII@Z				; probability
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?probability@@YAOIIII@Z
_TEXT	SEGMENT
tv136 = -288						; size = 8
tv95 = -288						; size = 8
tv89 = -288						; size = 8
tv82 = -288						; size = 8
_mpicks$ = -84						; size = 4
_p$ = -72						; size = 4
_mnums$ = -60						; size = 8
_n$ = -44						; size = 8
_temp$ = -28						; size = 8
_result$ = -12						; size = 8
_numbers$ = 8						; size = 4
_picks$ = 12						; size = 4
_meganums$ = 16						; size = 4
_megapicks$ = 20					; size = 4
?probability@@YAOIIII@Z PROC				; probability, COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 136  : 	long double result, temp;
; 137  : 	result = temp = 1.0;

	fld1
	fstp	QWORD PTR _temp$[ebp]
	fld	QWORD PTR _temp$[ebp]
	fstp	QWORD PTR _result$[ebp]

; 138  : 	long double n, mnums;
; 139  : 	unsigned p, mpicks;
; 140  : 
; 141  : 	for (n = numbers, p = picks; p > 0; n--, p--)

	mov	eax, DWORD PTR _numbers$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	mov	DWORD PTR tv82[ebp+4], 0
	fild	QWORD PTR tv82[ebp]
	fstp	QWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _picks$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN6@probabilit
$LN5@probabilit:
	fld	QWORD PTR _n$[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	QWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN6@probabilit:
	cmp	DWORD PTR _p$[ebp], 0
	jbe	SHORT $LN4@probabilit

; 142  : 		result *= n/p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	DWORD PTR tv89[ebp+4], 0
	fild	QWORD PTR tv89[ebp]
	fdivr	QWORD PTR _n$[ebp]
	fmul	QWORD PTR _result$[ebp]
	fstp	QWORD PTR _result$[ebp]
	jmp	SHORT $LN5@probabilit
$LN4@probabilit:

; 143  : 
; 144  : 	for (mnums = meganums, mpicks = megapicks; megapicks > 0; meganums--, megapicks--)

	mov	eax, DWORD PTR _meganums$[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], 0
	fild	QWORD PTR tv95[ebp]
	fstp	QWORD PTR _mnums$[ebp]
	mov	ecx, DWORD PTR _megapicks$[ebp]
	mov	DWORD PTR _mpicks$[ebp], ecx
	jmp	SHORT $LN3@probabilit
$LN2@probabilit:
	mov	eax, DWORD PTR _meganums$[ebp]
	sub	eax, 1
	mov	DWORD PTR _meganums$[ebp], eax
	mov	ecx, DWORD PTR _megapicks$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _megapicks$[ebp], ecx
$LN3@probabilit:
	cmp	DWORD PTR _megapicks$[ebp], 0
	jbe	SHORT $LN1@probabilit

; 145  : 		temp *= meganums/megapicks;

	mov	eax, DWORD PTR _meganums$[ebp]
	xor	edx, edx
	div	DWORD PTR _megapicks$[ebp]
	mov	DWORD PTR tv136[ebp], eax
	mov	DWORD PTR tv136[ebp+4], 0
	fild	QWORD PTR tv136[ebp]
	fmul	QWORD PTR _temp$[ebp]
	fstp	QWORD PTR _temp$[ebp]
	jmp	SHORT $LN2@probabilit
$LN1@probabilit:

; 146  : 
; 147  : 	result *= temp;

	fld	QWORD PTR _result$[ebp]
	fmul	QWORD PTR _temp$[ebp]
	fstp	QWORD PTR _result$[ebp]

; 148  : 
; 149  : 	return result;

	fld	QWORD PTR _result$[ebp]

; 150  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?probability@@YAOIIII@Z ENDP				; probability
_TEXT	ENDS
PUBLIC	??_C@_0BP@HHBDPGAC@Next?5two?5numbers?5?$CIq?5to?5quit?$CJ?3?5?$AA@ ; `string'
PUBLIC	??_C@_0O@BGNJEAPP@?5of?5winning?4?6?$AA@	; `string'
PUBLIC	??_C@_0BI@CEBPDKGP@You?5have?5one?5chance?5in?5?$AA@ ; `string'
PUBLIC	??_C@_0EM@JFFJPFPB@Now?5enter?5the?5number?5of?5Powerbal@ ; `string'
PUBLIC	??_C@_0FF@JEIFIGFL@Enter?5the?5total?5number?5of?5choice@ ; `string'
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@O@Z:PROC
;	COMDAT ??_C@_0BP@HHBDPGAC@Next?5two?5numbers?5?$CIq?5to?5quit?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0BP@HHBDPGAC@Next?5two?5numbers?5?$CIq?5to?5quit?$CJ?3?5?$AA@ DB 'N'
	DB	'ext two numbers (q to quit): ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BGNJEAPP@?5of?5winning?4?6?$AA@
CONST	SEGMENT
??_C@_0O@BGNJEAPP@?5of?5winning?4?6?$AA@ DB ' of winning.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CEBPDKGP@You?5have?5one?5chance?5in?5?$AA@
CONST	SEGMENT
??_C@_0BI@CEBPDKGP@You?5have?5one?5chance?5in?5?$AA@ DB 'You have one cha'
	DB	'nce in ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@JFFJPFPB@Now?5enter?5the?5number?5of?5Powerbal@
CONST	SEGMENT
??_C@_0EM@JFFJPFPB@Now?5enter?5the?5number?5of?5Powerbal@ DB 'Now enter t'
	DB	'he number of Powerball choices and', 0aH, 'the number of pick'
	DB	's allowed:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@JEIFIGFL@Enter?5the?5total?5number?5of?5choice@
CONST	SEGMENT
??_C@_0FF@JEIFIGFL@Enter?5the?5total?5number?5of?5choice@ DB 'Enter the t'
	DB	'otal number of choices on the game card and', 0aH, 'the numbe'
	DB	'r of picks allowed:', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex4@@YAXXZ
_TEXT	SEGMENT
tv200 = -332						; size = 8
tv198 = -324						; size = 4
tv195 = -318						; size = 2
tv192 = -316						; size = 8
tv190 = -308						; size = 4
tv187 = -302						; size = 2
tv184 = -300						; size = 8
tv182 = -292						; size = 4
tv179 = -286						; size = 2
tv176 = -284						; size = 8
tv174 = -276						; size = 4
tv171 = -270						; size = 2
$T40300 = -264						; size = 4
_megachoices$ = -60					; size = 8
_megatotal$ = -44					; size = 8
_choices$ = -28						; size = 8
_total$ = -12						; size = 8
?ch7_ex4@@YAXXZ PROC					; ch7_ex4, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 153  : 	double total, choices, megatotal, megachoices;
; 154  : 	cout << "Enter the total number of choices on the game card and\n"
; 155  : 			"the number of picks allowed:\n";

	push	OFFSET ??_C@_0FF@JEIFIGFL@Enter?5the?5total?5number?5of?5choice@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN2@ch7_ex4:

; 156  : 
; 157  : 	while ((cin >> total >> choices) && choices <= total)

	mov	esi, esp
	lea	eax, DWORD PTR _choices$[ebp]
	push	eax
	mov	edi, esp
	lea	ecx, DWORD PTR _total$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40300[ebp], eax
	mov	edx, DWORD PTR $T40300[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40300[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN1@ch7_ex4
	fld	QWORD PTR _total$[ebp]
	fcomp	QWORD PTR _choices$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	$LN1@ch7_ex4

; 158  : 	{
; 159  : 		cout << "Now enter the number of Powerball choices and\n"
; 160  : 				"the number of picks allowed:\n";

	push	OFFSET ??_C@_0EM@JFFJPFPB@Now?5enter?5the?5number?5of?5Powerbal@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 161  : 
; 162  : 		cin >> megatotal >> megachoices;

	mov	esi, esp
	lea	eax, DWORD PTR _megachoices$[ebp]
	push	eax
	mov	edi, esp
	lea	ecx, DWORD PTR _megatotal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 163  : 
; 164  : 		cout << "You have one chance in ";

	push	OFFSET ??_C@_0BI@CEBPDKGP@You?5have?5one?5chance?5in?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 165  : 		cout << probability(total, choices, megatotal, megachoices);

	fld	QWORD PTR _megachoices$[ebp]
	fnstcw	WORD PTR tv171[ebp]
	movzx	eax, WORD PTR tv171[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv174[ebp], eax
	fldcw	WORD PTR tv174[ebp]
	fistp	QWORD PTR tv176[ebp]
	fldcw	WORD PTR tv171[ebp]
	mov	eax, DWORD PTR tv176[ebp]
	push	eax
	fld	QWORD PTR _megatotal$[ebp]
	fnstcw	WORD PTR tv179[ebp]
	movzx	eax, WORD PTR tv179[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv182[ebp], eax
	fldcw	WORD PTR tv182[ebp]
	fistp	QWORD PTR tv184[ebp]
	fldcw	WORD PTR tv179[ebp]
	mov	ecx, DWORD PTR tv184[ebp]
	push	ecx
	fld	QWORD PTR _choices$[ebp]
	fnstcw	WORD PTR tv187[ebp]
	movzx	eax, WORD PTR tv187[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv190[ebp], eax
	fldcw	WORD PTR tv190[ebp]
	fistp	QWORD PTR tv192[ebp]
	fldcw	WORD PTR tv187[ebp]
	mov	edx, DWORD PTR tv192[ebp]
	push	edx
	fld	QWORD PTR _total$[ebp]
	fnstcw	WORD PTR tv195[ebp]
	movzx	eax, WORD PTR tv195[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv198[ebp], eax
	fldcw	WORD PTR tv198[ebp]
	fistp	QWORD PTR tv200[ebp]
	fldcw	WORD PTR tv195[ebp]
	mov	eax, DWORD PTR tv200[ebp]
	push	eax
	call	?probability@@YAOIIII@Z			; probability
	add	esp, 16					; 00000010H
	mov	esi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@O@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 166  : 		cout << " of winning.\n";

	push	OFFSET ??_C@_0O@BGNJEAPP@?5of?5winning?4?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 167  : 		cout << "Next two numbers (q to quit): ";

	push	OFFSET ??_C@_0BP@HHBDPGAC@Next?5two?5numbers?5?$CIq?5to?5quit?$CJ?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 168  : 	}

	jmp	$LN2@ch7_ex4
$LN1@ch7_ex4:

; 169  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ch7_ex4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ch7_ex4:
	DD	4
	DD	$LN9@ch7_ex4
$LN9@ch7_ex4:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@ch7_ex4
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN6@ch7_ex4
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN7@ch7_ex4
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN8@ch7_ex4
$LN8@ch7_ex4:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN7@ch7_ex4:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN6@ch7_ex4:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN5@ch7_ex4:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?ch7_ex4@@YAXXZ ENDP					; ch7_ex4
_TEXT	ENDS
PUBLIC	?factorial@@YAXHPAH@Z				; factorial
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?factorial@@YAXHPAH@Z
_TEXT	SEGMENT
_factor$ = 8						; size = 4
_pf$ = 12						; size = 4
?factorial@@YAXHPAH@Z PROC				; factorial, COMDAT

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 174  : 	int temp, result;
; 175  : 	*pf = *pf * factor;

	mov	eax, DWORD PTR _pf$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, DWORD PTR _factor$[ebp]
	mov	edx, DWORD PTR _pf$[ebp]
	mov	DWORD PTR [edx], ecx

; 176  : 	if (factor > 1)

	cmp	DWORD PTR _factor$[ebp], 1
	jle	SHORT $LN2@factorial

; 177  : 		factorial(factor-1, pf);

	mov	eax, DWORD PTR _pf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factor$[ebp]
	sub	ecx, 1
	push	ecx
	call	?factorial@@YAXHPAH@Z			; factorial
	add	esp, 8
$LN2@factorial:

; 178  : 
; 179  : 	//return result;
; 180  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?factorial@@YAXHPAH@Z ENDP				; factorial
_TEXT	ENDS
PUBLIC	??_C@_04NMHJPDAJ@?$CB?5?$DN?5?$AA@		; `string'
;	COMDAT ??_C@_04NMHJPDAJ@?$CB?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_04NMHJPDAJ@?$CB?5?$DN?5?$AA@ DB '! = ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex5@@YAXXZ
_TEXT	SEGMENT
tv132 = -232						; size = 4
_presult$ = -32						; size = 4
_result$ = -20						; size = 4
_factorme$ = -8						; size = 4
?ch7_ex5@@YAXXZ PROC					; ch7_ex5, COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 183  : 	int factorme = 6;

	mov	DWORD PTR _factorme$[ebp], 6

; 184  : 	int result = 1;

	mov	DWORD PTR _result$[ebp], 1

; 185  : 	int * presult = &result;

	lea	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _presult$[ebp], eax

; 186  : 
; 187  : 	factorial(factorme, presult);

	mov	eax, DWORD PTR _presult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factorme$[ebp]
	push	ecx
	call	?factorial@@YAXHPAH@Z			; factorial
	add	esp, 8

; 188  : 
; 189  : 	cout << factorme << "! = " << *presult << endl << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	ecx
	mov	ebx, esp
	mov	edx, DWORD PTR _presult$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_04NMHJPDAJ@?$CB?5?$DN?5?$AA@
	mov	eax, esp
	mov	ecx, DWORD PTR _factorme$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	mov	DWORD PTR tv132[ebp], eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	mov	ecx, DWORD PTR tv132[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 190  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ch7_ex5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@ch7_ex5:
	DD	1
	DD	$LN4@ch7_ex5
$LN4@ch7_ex5:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@ch7_ex5
$LN3@ch7_ex5:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?ch7_ex5@@YAXXZ ENDP					; ch7_ex5
_TEXT	ENDS
PUBLIC	??_C@_0CK@GNFCMEHN@Enter?5a?5bunch?5of?5double?5values?0?5@ ; `string'
PUBLIC	?fill_array@@YAHPANH@Z				; fill_array
;	COMDAT ??_C@_0CK@GNFCMEHN@Enter?5a?5bunch?5of?5double?5values?0?5@
CONST	SEGMENT
??_C@_0CK@GNFCMEHN@Enter?5a?5bunch?5of?5double?5values?0?5@ DB 'Enter a b'
	DB	'unch of double values, ya fairy', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?fill_array@@YAHPANH@Z
_TEXT	SEGMENT
$T40316 = -224						; size = 4
$T40317 = -212						; size = 4
_loop$ = -8						; size = 4
_input$ = 8						; size = 4
_size$ = 12						; size = 4
?fill_array@@YAHPANH@Z PROC				; fill_array, COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 194  : 	int loop = 0;

	mov	DWORD PTR _loop$[ebp], 0

; 195  : 	cout << "Enter a bunch of double values, ya fairy\n";

	push	OFFSET ??_C@_0CK@GNFCMEHN@Enter?5a?5bunch?5of?5double?5values?0?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	jmp	SHORT $LN3@fill_array
$LN2@fill_array:

; 196  : 			
; 197  : 	for (; loop < size && cout << "#" << loop+1 << ": " && cin >> input[loop]; loop++)

	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$[ebp], eax
$LN3@fill_array:
	mov	eax, DWORD PTR _loop$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	$LN1@fill_array
	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_01IPJKGB@?$CD?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	DWORD PTR $T40316[ebp], eax
	mov	edx, DWORD PTR $T40316[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40316[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@fill_array
	mov	eax, DWORD PTR _loop$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40317[ebp], eax
	mov	eax, DWORD PTR $T40317[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR $T40317[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@fill_array

; 198  : 		;

	jmp	$LN2@fill_array
$LN1@fill_array:

; 199  : 	cout << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 200  : 	return loop;

	mov	eax, DWORD PTR _loop$[ebp]

; 201  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?fill_array@@YAHPANH@Z ENDP				; fill_array
_TEXT	ENDS
PUBLIC	??_C@_0BA@HGLPJEFM@Array?5Element?5?$CD?$AA@	; `string'
PUBLIC	?show_array@@YAHPBNH@Z				; show_array
;	COMDAT ??_C@_0BA@HGLPJEFM@Array?5Element?5?$CD?$AA@
CONST	SEGMENT
??_C@_0BA@HGLPJEFM@Array?5Element?5?$CD?$AA@ DB 'Array Element #', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?show_array@@YAHPBNH@Z
_TEXT	SEGMENT
_loop$ = -8						; size = 4
_input$ = 8						; size = 4
_size$ = 12						; size = 4
?show_array@@YAHPBNH@Z PROC				; show_array, COMDAT

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 205  : 	int loop = 0;

	mov	DWORD PTR _loop$[ebp], 0
$LN2@show_array:

; 206  : 
; 207  : 	while (loop < size)

	mov	eax, DWORD PTR _loop$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jge	SHORT $LN1@show_array

; 208  : 	{
; 209  : 		cout << "Array Element #" << loop+1 << ": " << input[loop] << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _loop$[ebp]
	mov	edx, DWORD PTR _input$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx+ecx*8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	ebx, esp
	push	eax
	push	OFFSET ??_C@_0BA@HGLPJEFM@Array?5Element?5?$CD?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 210  : 		loop++;

	mov	eax, DWORD PTR _loop$[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$[ebp], eax

; 211  : 	}

	jmp	$LN2@show_array
$LN1@show_array:

; 212  : 	
; 213  : 	return 0;

	xor	eax, eax

; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?show_array@@YAHPBNH@Z ENDP				; show_array
_TEXT	ENDS
PUBLIC	?Reverse_array@@YAXQANH@Z			; Reverse_array
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Reverse_array@@YAXQANH@Z
_TEXT	SEGMENT
_newsize$ = -36						; size = 4
_countr$ = -24						; size = 4
_tempo$ = -12						; size = 8
_da$ = 8						; size = 4
_asize$ = 12						; size = 4
?Reverse_array@@YAXQANH@Z PROC				; Reverse_array, COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 219  : 	double tempo;
; 220  : 	int countr = 0;

	mov	DWORD PTR _countr$[ebp], 0

; 221  : 	int newsize = asize;

	mov	eax, DWORD PTR _asize$[ebp]
	mov	DWORD PTR _newsize$[ebp], eax

; 222  : 
; 223  : 	asize--;

	mov	eax, DWORD PTR _asize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _asize$[ebp], eax
$LN2@Reverse_ar:

; 224  : 
; 225  : 	while(countr < asize)

	mov	eax, DWORD PTR _countr$[ebp]
	cmp	eax, DWORD PTR _asize$[ebp]
	jge	SHORT $LN1@Reverse_ar

; 226  : 	{
; 227  : 		tempo = da[countr];

	mov	eax, DWORD PTR _countr$[ebp]
	mov	ecx, DWORD PTR _da$[ebp]
	fld	QWORD PTR [ecx+eax*8]
	fstp	QWORD PTR _tempo$[ebp]

; 228  : 		da[countr++] = da[asize];

	mov	eax, DWORD PTR _countr$[ebp]
	mov	ecx, DWORD PTR _da$[ebp]
	mov	edx, DWORD PTR _asize$[ebp]
	mov	esi, DWORD PTR _da$[ebp]
	fld	QWORD PTR [esi+edx*8]
	fstp	QWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _countr$[ebp]
	add	eax, 1
	mov	DWORD PTR _countr$[ebp], eax

; 229  : 		da[asize--] = tempo;

	mov	eax, DWORD PTR _asize$[ebp]
	mov	ecx, DWORD PTR _da$[ebp]
	fld	QWORD PTR _tempo$[ebp]
	fstp	QWORD PTR [ecx+eax*8]
	mov	edx, DWORD PTR _asize$[ebp]
	sub	edx, 1
	mov	DWORD PTR _asize$[ebp], edx

; 230  : 	}

	jmp	SHORT $LN2@Reverse_ar
$LN1@Reverse_ar:

; 231  : 
; 232  : 	//show_array(da, newsize);
; 233  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reverse_array@@YAXQANH@Z ENDP				; Reverse_array
_TEXT	ENDS
PUBLIC	??_C@_0CA@CDFAFOFP@Double?5Reverse?5?4?4?4?5Yooo?9oooh?$CB?6?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@BGKNBDPL@Reverse?5array?4?4?4HOOO?9OOOH?6?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CA@CDFAFOFP@Double?5Reverse?5?4?4?4?5Yooo?9oooh?$CB?6?6?$AA@
CONST	SEGMENT
??_C@_0CA@CDFAFOFP@Double?5Reverse?5?4?4?4?5Yooo?9oooh?$CB?6?6?$AA@ DB 'D'
	DB	'ouble Reverse ... Yooo-oooh!', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BGKNBDPL@Reverse?5array?4?4?4HOOO?9OOOH?6?6?$AA@
CONST	SEGMENT
??_C@_0BM@BGKNBDPL@Reverse?5array?4?4?4HOOO?9OOOH?6?6?$AA@ DB 'Reverse ar'
	DB	'ray...HOOO-OOOH', 0aH, 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex6@@YAXXZ
_TEXT	SEGMENT
_theArray$ = -84					; size = 40
_numsReturned$ = -36					; size = 4
_numberEntered$ = -24					; size = 4
_arraysize$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
?ch7_ex6@@YAXXZ PROC					; ch7_ex6, COMDAT

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 237  : 	const int arraysize = 5;

	mov	DWORD PTR _arraysize$[ebp], 5

; 238  : 	int numberEntered, numsReturned;
; 239  : 	numberEntered = numsReturned = 0;

	mov	DWORD PTR _numsReturned$[ebp], 0
	mov	eax, DWORD PTR _numsReturned$[ebp]
	mov	DWORD PTR _numberEntered$[ebp], eax

; 240  : 	double theArray[arraysize];
; 241  : 
; 242  : 	numberEntered = fill_array(theArray, arraysize);

	push	5
	lea	eax, DWORD PTR _theArray$[ebp]
	push	eax
	call	?fill_array@@YAHPANH@Z			; fill_array
	add	esp, 8
	mov	DWORD PTR _numberEntered$[ebp], eax

; 243  : 	numsReturned = show_array(theArray, numberEntered);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp]
	push	ecx
	call	?show_array@@YAHPBNH@Z			; show_array
	add	esp, 8
	mov	DWORD PTR _numsReturned$[ebp], eax

; 244  : 	cout << "Reverse array...HOOO-OOOH\n\n";

	push	OFFSET ??_C@_0BM@BGKNBDPL@Reverse?5array?4?4?4HOOO?9OOOH?6?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 245  : 	Reverse_array(theArray, numberEntered);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp]
	push	ecx
	call	?Reverse_array@@YAXQANH@Z		; Reverse_array
	add	esp, 8

; 246  : 	show_array(theArray, numberEntered);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp]
	push	ecx
	call	?show_array@@YAHPBNH@Z			; show_array
	add	esp, 8

; 247  : 	cout << "Double Reverse ... Yooo-oooh!\n\n";

	push	OFFSET ??_C@_0CA@CDFAFOFP@Double?5Reverse?5?4?4?4?5Yooo?9oooh?$CB?6?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 248  : 	Reverse_array(theArray, numberEntered);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp]
	push	ecx
	call	?Reverse_array@@YAXQANH@Z		; Reverse_array
	add	esp, 8

; 249  : 	show_array(theArray, numberEntered);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp]
	push	ecx
	call	?show_array@@YAHPBNH@Z			; show_array
	add	esp, 8

; 250  : 	cout << "Double Reverse ... Yooo-oooh!\n\n";

	push	OFFSET ??_C@_0CA@CDFAFOFP@Double?5Reverse?5?4?4?4?5Yooo?9oooh?$CB?6?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 251  : 	Reverse_array(theArray+1, numberEntered-2);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	sub	eax, 2
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp+8]
	push	ecx
	call	?Reverse_array@@YAXQANH@Z		; Reverse_array
	add	esp, 8

; 252  : 	show_array(theArray, numberEntered);

	mov	eax, DWORD PTR _numberEntered$[ebp]
	push	eax
	lea	ecx, DWORD PTR _theArray$[ebp]
	push	ecx
	call	?show_array@@YAHPBNH@Z			; show_array
	add	esp, 8

; 253  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ch7_ex6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@ch7_ex6:
	DD	1
	DD	$LN4@ch7_ex6
$LN4@ch7_ex6:
	DD	-84					; ffffffacH
	DD	40					; 00000028H
	DD	$LN3@ch7_ex6
$LN3@ch7_ex6:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
?ch7_ex6@@YAXXZ ENDP					; ch7_ex6
_TEXT	ENDS
PUBLIC	??_C@_0CG@DIMADAEJ@Bad?5input?$DL?5input?5process?5termina@ ; `string'
PUBLIC	??_C@_0O@OKCPNHNF@Enter?5value?5?$CD?$AA@	; `string'
PUBLIC	?fill_array@@YAPANPAN0@Z			; fill_array
EXTRN	__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_??7ios_base@std@@QBE_NXZ:PROC
;	COMDAT ??_C@_0CG@DIMADAEJ@Bad?5input?$DL?5input?5process?5termina@
CONST	SEGMENT
??_C@_0CG@DIMADAEJ@Bad?5input?$DL?5input?5process?5termina@ DB 'Bad input'
	DB	'; input process terminated.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OKCPNHNF@Enter?5value?5?$CD?$AA@
CONST	SEGMENT
??_C@_0O@OKCPNHNF@Enter?5value?5?$CD?$AA@ DB 'Enter value #', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?fill_array@@YAPANPAN0@Z
_TEXT	SEGMENT
_i$ = -24						; size = 4
_temp$ = -12						; size = 8
_arStart$ = 8						; size = 4
_arEnd$ = 12						; size = 4
?fill_array@@YAPANPAN0@Z PROC				; fill_array, COMDAT

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 258  : 	using namespace std;
; 259  : 	double temp;
; 260  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN7@fill_array@2:

; 261  : 
; 262  : 	while ( arStart != arEnd )

	mov	eax, DWORD PTR _arStart$[ebp]
	cmp	eax, DWORD PTR _arEnd$[ebp]
	je	$LN6@fill_array@2

; 263  : 	{
; 264  : 		cout << "Enter value #" << (i + 1) << ": ";

	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0O@OKCPNHNF@Enter?5value?5?$CD?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 265  : 		cin >> temp;

	mov	esi, esp
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 266  : 		if (!cin)

	mov	eax, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_??7ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@fill_array@2

; 267  : 		{
; 268  : 			cin.clear();

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@fill_array@2:

; 269  : 			while (cin.get() != '\n')

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN3@fill_array@2

; 270  : 				continue;

	jmp	SHORT $LN4@fill_array@2
	jmp	SHORT $LN4@fill_array@2
$LN3@fill_array@2:

; 271  : 			cout << "Bad input; input process terminated.\n";

	push	OFFSET ??_C@_0CG@DIMADAEJ@Bad?5input?$DL?5input?5process?5termina@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 272  : 			break;

	jmp	SHORT $LN6@fill_array@2
	jmp	SHORT $LN1@fill_array@2
$LN5@fill_array@2:

; 273  : 		}
; 274  : 		else if (temp < 0)

	fldz
	fcomp	QWORD PTR _temp$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@fill_array@2

; 275  : 			break;

	jmp	SHORT $LN6@fill_array@2
$LN1@fill_array@2:

; 276  : 		*(arStart++) = temp;

	mov	eax, DWORD PTR _arStart$[ebp]
	fld	QWORD PTR _temp$[ebp]
	fstp	QWORD PTR [eax]
	mov	ecx, DWORD PTR _arStart$[ebp]
	add	ecx, 8
	mov	DWORD PTR _arStart$[ebp], ecx

; 277  : 		i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 278  : 	}

	jmp	$LN7@fill_array@2
$LN6@fill_array@2:

; 279  : 	return arStart;

	mov	eax, DWORD PTR _arStart$[ebp]

; 280  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@fill_array@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@fill_array@2:
	DD	1
	DD	$LN11@fill_array@2
$LN11@fill_array@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN10@fill_array@2
$LN10@fill_array@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?fill_array@@YAPANPAN0@Z ENDP				; fill_array
_TEXT	ENDS
PUBLIC	??_C@_0L@DCBFEOGH@Property?5?$CD?$AA@		; `string'
PUBLIC	?show_array@@YAXPBN0@Z				; show_array
;	COMDAT ??_C@_0L@DCBFEOGH@Property?5?$CD?$AA@
CONST	SEGMENT
??_C@_0L@DCBFEOGH@Property?5?$CD?$AA@ DB 'Property #', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?show_array@@YAXPBN0@Z
_TEXT	SEGMENT
tv78 = -212						; size = 8
_i$32595 = -8						; size = 4
_aStart$ = 8						; size = 4
_aEnd$ = 12						; size = 4
?show_array@@YAXPBN0@Z PROC				; show_array, COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 285  : 	
; 286  : 	for (int i = 0; aStart < aEnd; i++)

	mov	DWORD PTR _i$32595[ebp], 0
	jmp	SHORT $LN3@show_array@2
$LN2@show_array@2:
	mov	eax, DWORD PTR _i$32595[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32595[ebp], eax
$LN3@show_array@2:
	mov	eax, DWORD PTR _aStart$[ebp]
	cmp	eax, DWORD PTR _aEnd$[ebp]
	jae	$LN1@show_array@2

; 287  : 	{
; 288  : 		cout << "Property #" << (i + 1) << ": ";

	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	eax, DWORD PTR _i$32595[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0L@DCBFEOGH@Property?5?$CD?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 289  : 		cout << *(aStart++) << endl;

	mov	eax, DWORD PTR _aStart$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR tv78[ebp]
	mov	ecx, DWORD PTR _aStart$[ebp]
	add	ecx, 8
	mov	DWORD PTR _aStart$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	edx
	mov	edi, esp
	sub	esp, 8
	fld	QWORD PTR tv78[ebp]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 290  : 	}

	jmp	$LN2@show_array@2
$LN1@show_array@2:

; 291  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?show_array@@YAXPBN0@Z ENDP				; show_array
_TEXT	ENDS
PUBLIC	?revalue@@YAXNPAN0@Z				; revalue
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?revalue@@YAXNPAN0@Z
_TEXT	SEGMENT
_i$32613 = -8						; size = 4
_r$ = 8							; size = 8
_aStart$ = 16						; size = 4
_aEnd$ = 20						; size = 4
?revalue@@YAXNPAN0@Z PROC				; revalue, COMDAT

; 295  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 296  : 	for (int i = 0; aStart < aEnd; i++)

	mov	DWORD PTR _i$32613[ebp], 0
	jmp	SHORT $LN3@revalue
$LN2@revalue:
	mov	eax, DWORD PTR _i$32613[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32613[ebp], eax
$LN3@revalue:
	mov	eax, DWORD PTR _aStart$[ebp]
	cmp	eax, DWORD PTR _aEnd$[ebp]
	jae	SHORT $LN1@revalue

; 297  : 		*(aStart++) *= r;

	mov	eax, DWORD PTR _aStart$[ebp]
	fld	QWORD PTR [eax]
	fmul	QWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _aStart$[ebp]
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR _aStart$[ebp]
	add	edx, 8
	mov	DWORD PTR _aStart$[ebp], edx
	jmp	SHORT $LN2@revalue
$LN1@revalue:

; 298  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?revalue@@YAXNPAN0@Z ENDP				; revalue
_TEXT	ENDS
PUBLIC	??_C@_06MJLDIBBJ@Done?4?6?$AA@			; `string'
PUBLIC	??_C@_0CD@IKHNKGKB@Bad?5input?$DL?5Please?5enter?5a?5number@ ; `string'
PUBLIC	??_C@_0BL@BNKJKIMK@Enter?5revaluation?5factor?3?5?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_06MJLDIBBJ@Done?4?6?$AA@
CONST	SEGMENT
??_C@_06MJLDIBBJ@Done?4?6?$AA@ DB 'Done.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IKHNKGKB@Bad?5input?$DL?5Please?5enter?5a?5number@
CONST	SEGMENT
??_C@_0CD@IKHNKGKB@Bad?5input?$DL?5Please?5enter?5a?5number@ DB 'Bad inpu'
	DB	't; Please enter a number: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BNKJKIMK@Enter?5revaluation?5factor?3?5?$AA@
CONST	SEGMENT
??_C@_0BL@BNKJKIMK@Enter?5revaluation?5factor?3?5?$AA@ DB 'Enter revaluat'
	DB	'ion factor: ', 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex7@@YAXXZ
_TEXT	SEGMENT
$T40340 = -292						; size = 4
_factor$32625 = -88					; size = 8
_size$ = -72						; size = 4
_properties$ = -60					; size = 40
_Max$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ch7_ex7@@YAXXZ PROC					; ch7_ex7, COMDAT

; 301  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 302  : 	const int Max = 5;

	mov	DWORD PTR _Max$[ebp], 5

; 303  : 	double properties[Max];
; 304  : 
; 305  : 	double * size = fill_array(properties, properties+Max);

	lea	eax, DWORD PTR _properties$[ebp+40]
	push	eax
	lea	ecx, DWORD PTR _properties$[ebp]
	push	ecx
	call	?fill_array@@YAPANPAN0@Z		; fill_array
	add	esp, 8
	mov	DWORD PTR _size$[ebp], eax

; 306  : 	show_array(properties, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _properties$[ebp]
	push	ecx
	call	?show_array@@YAXPBN0@Z			; show_array
	add	esp, 8

; 307  : 
; 308  : 	if (size)

	cmp	DWORD PTR _size$[ebp], 0
	je	$LN5@ch7_ex7

; 309  : 	{
; 310  : 		cout << "Enter revaluation factor: ";

	push	OFFSET ??_C@_0BL@BNKJKIMK@Enter?5revaluation?5factor?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN4@ch7_ex7:

; 311  : 		double factor;
; 312  : 		while (!(cin >> factor))

	mov	esi, esp
	lea	eax, DWORD PTR _factor$32625[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40340[ebp], eax
	mov	ecx, DWORD PTR $T40340[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T40340[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_??7ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ch7_ex7

; 313  : 		{
; 314  : 			cin.clear();

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ch7_ex7:

; 315  : 			while (cin.get() != '\n')

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN1@ch7_ex7

; 316  : 				continue;

	jmp	SHORT $LN2@ch7_ex7
	jmp	SHORT $LN2@ch7_ex7
$LN1@ch7_ex7:

; 317  : 			cout << "Bad input; Please enter a number: ";

	push	OFFSET ??_C@_0CD@IKHNKGKB@Bad?5input?$DL?5Please?5enter?5a?5number@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 318  : 		}

	jmp	$LN4@ch7_ex7
$LN3@ch7_ex7:

; 319  : 		revalue(factor, properties, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _properties$[ebp]
	push	ecx
	sub	esp, 8
	fld	QWORD PTR _factor$32625[ebp]
	fstp	QWORD PTR [esp]
	call	?revalue@@YAXNPAN0@Z			; revalue
	add	esp, 16					; 00000010H

; 320  : 		show_array(properties, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _properties$[ebp]
	push	ecx
	call	?show_array@@YAXPBN0@Z			; show_array
	add	esp, 8
$LN5@ch7_ex7:

; 321  : 	}
; 322  : 	cout << "Done.\n";

	push	OFFSET ??_C@_06MJLDIBBJ@Done?4?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 323  : 	cin.get();

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 324  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ch7_ex7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@ch7_ex7:
	DD	2
	DD	$LN10@ch7_ex7
$LN10@ch7_ex7:
	DD	-60					; ffffffc4H
	DD	40					; 00000028H
	DD	$LN8@ch7_ex7
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN9@ch7_ex7
$LN9@ch7_ex7:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN8@ch7_ex7:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?ch7_ex7@@YAXXZ ENDP					; ch7_ex7
_TEXT	ENDS
PUBLIC	??_C@_0M@PCLBILAI@?5expenses?3?5?$AA@		; `string'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_06IEAFMNNH@Enter?5?$AA@			; `string'
PUBLIC	?fill@@YAXPAUexpenses@@@Z			; fill
;	COMDAT ??_C@_0M@PCLBILAI@?5expenses?3?5?$AA@
CONST	SEGMENT
??_C@_0M@PCLBILAI@?5expenses?3?5?$AA@ DB ' expenses: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEAFMNNH@Enter?5?$AA@
CONST	SEGMENT
??_C@_06IEAFMNNH@Enter?5?$AA@ DB 'Enter ', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?fill@@YAXPAUexpenses@@@Z
_TEXT	SEGMENT
_x$32657 = -20						; size = 4
_i$32652 = -8						; size = 4
_expend$ = 8						; size = 4
?fill@@YAXPAUexpenses@@@Z PROC				; fill, COMDAT

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 346  : 	for (int i = 0; i < Seasons; i++)

	mov	DWORD PTR _i$32652[ebp], 0
	jmp	SHORT $LN6@fill
$LN5@fill:
	mov	eax, DWORD PTR _i$32652[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32652[ebp], eax
$LN6@fill:
	cmp	DWORD PTR _i$32652[ebp], 4
	jge	$LN7@fill

; 347  : 	{
; 348  : 		cout << "Enter ";

	push	OFFSET ??_C@_06IEAFMNNH@Enter?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 349  : 
; 350  : 		for (int x = 0; Seazon[i][x] != '\0'; x++)

	mov	DWORD PTR _x$32657[ebp], 0
	jmp	SHORT $LN3@fill
$LN2@fill:
	mov	eax, DWORD PTR _x$32657[ebp]
	add	eax, 1
	mov	DWORD PTR _x$32657[ebp], eax
$LN3@fill:
	mov	eax, DWORD PTR _i$32652[ebp]
	mov	ecx, DWORD PTR _x$32657[ebp]
	movsx	edx, BYTE PTR _Seazon[ecx+eax*8]
	test	edx, edx
	je	SHORT $LN1@fill

; 351  : 			cout << Seazon[i][x];

	mov	eax, DWORD PTR _i$32652[ebp]
	mov	ecx, DWORD PTR _x$32657[ebp]
	movzx	edx, BYTE PTR _Seazon[ecx+eax*8]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	jmp	SHORT $LN2@fill
$LN1@fill:

; 352  : 		
; 353  : 		cout << " expenses: ";

	push	OFFSET ??_C@_0M@PCLBILAI@?5expenses?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 354  : 		cin >> expend->expens[i];

	mov	eax, DWORD PTR _i$32652[ebp]
	mov	ecx, DWORD PTR _expend$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 355  : 	}

	jmp	$LN5@fill
$LN7@fill:

; 356  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?fill@@YAXPAUexpenses@@@Z ENDP				; fill
_TEXT	ENDS
PUBLIC	??_C@_0BC@PDMEGKBM@Total?5Expenses?3?5$?$AA@	; `string'
PUBLIC	??_C@_03IIIIJPGA@?3?5$?$AA@			; `string'
PUBLIC	??_C@_0L@PGOFJOGO@?6EXPENSES?6?$AA@		; `string'
PUBLIC	?show@@YAXPAUexpenses@@@Z			; show
;	COMDAT ??_C@_0BC@PDMEGKBM@Total?5Expenses?3?5$?$AA@
CONST	SEGMENT
??_C@_0BC@PDMEGKBM@Total?5Expenses?3?5$?$AA@ DB 'Total Expenses: $', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIIIJPGA@?3?5$?$AA@
CONST	SEGMENT
??_C@_03IIIIJPGA@?3?5$?$AA@ DB ': $', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGOFJOGO@?6EXPENSES?6?$AA@
CONST	SEGMENT
??_C@_0L@PGOFJOGO@?6EXPENSES?6?$AA@ DB 0aH, 'EXPENSES', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?show@@YAXPAUexpenses@@@Z
_TEXT	SEGMENT
_i$32699 = -24						; size = 4
_total$ = -12						; size = 8
_expend$ = 8						; size = 4
?show@@YAXPAUexpenses@@@Z PROC				; show, COMDAT

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 360  : 	double total = 0.0;

	fldz
	fstp	QWORD PTR _total$[ebp]

; 361  : 	cout << "\nEXPENSES\n";

	push	OFFSET ??_C@_0L@PGOFJOGO@?6EXPENSES?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 362  : 	for (int i = 0; i < Seasons; i++)

	mov	DWORD PTR _i$32699[ebp], 0
	jmp	SHORT $LN3@show
$LN2@show:
	mov	eax, DWORD PTR _i$32699[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32699[ebp], eax
$LN3@show:
	cmp	DWORD PTR _i$32699[ebp], 4
	jge	SHORT $LN1@show

; 363  : 	{
; 364  : 		cout << ": $" << expend->expens[i] << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _i$32699[ebp]
	mov	edx, DWORD PTR _expend$[ebp]
	sub	esp, 8
	fld	QWORD PTR [edx+ecx*8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_03IIIIJPGA@?3?5$?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 365  : 		total += expend->expens[i];

	mov	eax, DWORD PTR _i$32699[ebp]
	mov	ecx, DWORD PTR _expend$[ebp]
	fld	QWORD PTR _total$[ebp]
	fadd	QWORD PTR [ecx+eax*8]
	fstp	QWORD PTR _total$[ebp]

; 366  : 	}

	jmp	SHORT $LN2@show
$LN1@show:

; 367  : 	cout << "Total Expenses: $" << total << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	sub	esp, 8
	fld	QWORD PTR _total$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BC@PDMEGKBM@Total?5Expenses?3?5$?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?show@@YAXPAUexpenses@@@Z ENDP				; show
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ch7_ex8@@YAXXZ
_TEXT	SEGMENT
_expendables$ = -40					; size = 32
__$ArrayPad$ = -4					; size = 4
?ch7_ex8@@YAXXZ PROC					; ch7_ex8, COMDAT

; 370  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 371  : 	expenses expendables;
; 372  : 	fill(&expendables);

	lea	eax, DWORD PTR _expendables$[ebp]
	push	eax
	call	?fill@@YAXPAUexpenses@@@Z		; fill
	add	esp, 4

; 373  : 	show(&expendables);

	lea	eax, DWORD PTR _expendables$[ebp]
	push	eax
	call	?show@@YAXPAUexpenses@@@Z		; show
	add	esp, 4

; 374  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ch7_ex8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@ch7_ex8:
	DD	1
	DD	$LN4@ch7_ex8
$LN4@ch7_ex8:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@ch7_ex8
$LN3@ch7_ex8:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?ch7_ex8@@YAXXZ ENDP					; ch7_ex8
_TEXT	ENDS
PUBLIC	??_C@_07DCDCJLMG@Skill?3?7?$AA@			; `string'
PUBLIC	??_C@_07FFJMHLKH@Hobby?3?7?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_09GENCJOJG@Student?5?$CD?$AA@		; `string'
PUBLIC	??_C@_06CAGLJNJI@Name?3?7?$AA@			; `string'
PUBLIC	?getinfo@@YAHQAUstudent@@H@Z			; getinfo
EXTRN	__imp_?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z:PROC
;	COMDAT ??_C@_07DCDCJLMG@Skill?3?7?$AA@
CONST	SEGMENT
??_C@_07DCDCJLMG@Skill?3?7?$AA@ DB 'Skill:', 09H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FFJMHLKH@Hobby?3?7?$AA@
CONST	SEGMENT
??_C@_07FFJMHLKH@Hobby?3?7?$AA@ DB 'Hobby:', 09H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GENCJOJG@Student?5?$CD?$AA@
CONST	SEGMENT
??_C@_09GENCJOJG@Student?5?$CD?$AA@ DB 'Student #', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAGLJNJI@Name?3?7?$AA@
CONST	SEGMENT
??_C@_06CAGLJNJI@Name?3?7?$AA@ DB 'Name:', 09H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?getinfo@@YAHQAUstudent@@H@Z
_TEXT	SEGMENT
_x$ = -8						; size = 4
_pa$ = 8						; size = 4
_n$ = 12						; size = 4
?getinfo@@YAHQAUstudent@@H@Z PROC			; getinfo, COMDAT

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 391  : 	int x = 0;

	mov	DWORD PTR _x$[ebp], 0
$LN3@getinfo:

; 392  : 	while (x < n)

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	$LN2@getinfo

; 393  : 	{
; 394  : 		cout << "Student #" << x << endl
; 395  : 			 << "Name:\t";

	push	OFFSET ??_C@_06CAGLJNJI@Name?3?7?$AA@
	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	OFFSET ??_C@_09GENCJOJG@Student?5?$CD?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 396  : 		cin.getline(pa[x].fullname, SLEN);

	mov	esi, esp
	push	0
	push	30					; 0000001eH
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _pa$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 397  : 		if (pa[x].fullname == " ")

	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _pa$[ebp]
	cmp	eax, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	jne	SHORT $LN1@getinfo

; 398  : 			return x;

	mov	eax, DWORD PTR _x$[ebp]
	jmp	$LN4@getinfo
$LN1@getinfo:

; 399  : 		cout << "Hobby:\t";

	push	OFFSET ??_C@_07FFJMHLKH@Hobby?3?7?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 400  : 		cin.getline(pa[x].hobby, SLEN);

	mov	esi, esp
	push	0
	push	30					; 0000001eH
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _pa$[ebp]
	lea	edx, DWORD PTR [ecx+eax+30]
	push	edx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 401  : 		cout << "Skill:\t";

	push	OFFSET ??_C@_07DCDCJLMG@Skill?3?7?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 402  : 		cin >> pa[x].ooplevel;

	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _pa$[ebp]
	lea	edx, DWORD PTR [ecx+eax+60]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 403  : 		cin.get();

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 404  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 405  : 
; 406  : 	}

	jmp	$LN3@getinfo
$LN2@getinfo:

; 407  : 	return x;

	mov	eax, DWORD PTR _x$[ebp]
$LN4@getinfo:

; 408  : 	
; 409  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getinfo@@YAHQAUstudent@@H@Z ENDP			; getinfo
_TEXT	ENDS
PUBLIC	??_C@_08BOMOONKD@Skillz?3?7?$AA@		; `string'
PUBLIC	??_C@_02PHMGELLB@?6?6?$AA@			; `string'
PUBLIC	?display1@@YAXUstudent@@@Z			; display1
;	COMDAT ??_C@_08BOMOONKD@Skillz?3?7?$AA@
CONST	SEGMENT
??_C@_08BOMOONKD@Skillz?3?7?$AA@ DB 'Skillz:', 09H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PHMGELLB@?6?6?$AA@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6?$AA@ DB 0aH, 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?display1@@YAXUstudent@@@Z
_TEXT	SEGMENT
_st$ = 8						; size = 64
?display1@@YAXUstudent@@@Z PROC				; display1, COMDAT

; 412  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 413  : 	cout << "Name:\t" << st.fullname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	ecx, DWORD PTR _st$[ebp]
	push	ecx
	push	OFFSET ??_C@_06CAGLJNJI@Name?3?7?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 414  : 	cout << "Hobby:\t" << st.hobby << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	ecx, DWORD PTR _st$[ebp+30]
	push	ecx
	push	OFFSET ??_C@_07FFJMHLKH@Hobby?3?7?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 415  : 	cout << "Skillz:\t" << st.ooplevel << "\n\n";

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	mov	esi, esp
	mov	eax, DWORD PTR _st$[ebp+60]
	push	eax
	push	OFFSET ??_C@_08BOMOONKD@Skillz?3?7?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 416  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@display1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@display1:
	DD	1
	DD	$LN4@display1
$LN4@display1:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@display1
$LN3@display1:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?display1@@YAXUstudent@@@Z ENDP				; display1
_TEXT	ENDS
PUBLIC	?display2@@YAXPBUstudent@@@Z			; display2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?display2@@YAXPBUstudent@@@Z
_TEXT	SEGMENT
_ps$ = 8						; size = 4
?display2@@YAXPBUstudent@@@Z PROC			; display2, COMDAT

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 419  : 	cout << "Name:\t" << ps->fullname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	push	ecx
	push	OFFSET ??_C@_06CAGLJNJI@Name?3?7?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 420  : 	cout << "Hobby:\t" << ps->hobby << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _ps$[ebp]
	add	ecx, 30					; 0000001eH
	push	ecx
	push	OFFSET ??_C@_07FFJMHLKH@Hobby?3?7?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 421  : 	cout << "Skillz:\t" << ps->ooplevel << "\n\n";

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	mov	esi, esp
	mov	eax, DWORD PTR _ps$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	OFFSET ??_C@_08BOMOONKD@Skillz?3?7?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 422  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?display2@@YAXPBUstudent@@@Z ENDP			; display2
_TEXT	ENDS
PUBLIC	?display3@@YAXQBUstudent@@H@Z			; display3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?display3@@YAXQBUstudent@@H@Z
_TEXT	SEGMENT
_x$32784 = -8						; size = 4
_pa$ = 8						; size = 4
_n$ = 12						; size = 4
?display3@@YAXQBUstudent@@H@Z PROC			; display3, COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 425  : 	for (int x = 0; x < n; x++)

	mov	DWORD PTR _x$32784[ebp], 0
	jmp	SHORT $LN3@display3
$LN2@display3:
	mov	eax, DWORD PTR _x$32784[ebp]
	add	eax, 1
	mov	DWORD PTR _x$32784[ebp], eax
$LN3@display3:
	mov	eax, DWORD PTR _x$32784[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	$LN4@display3

; 426  : 	{
; 427  : 		cout << "Name:\t" << pa[x].fullname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$32784[ebp]
	shl	ecx, 6
	add	ecx, DWORD PTR _pa$[ebp]
	push	ecx
	push	OFFSET ??_C@_06CAGLJNJI@Name?3?7?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 428  : 		cout << "Hobby:\t" << pa[x].hobby << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$32784[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _pa$[ebp]
	lea	eax, DWORD PTR [edx+ecx+30]
	push	eax
	push	OFFSET ??_C@_07FFJMHLKH@Hobby?3?7?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 429  : 		cout << "Skillz:\t" << pa[x].ooplevel << "\n\n";

	push	OFFSET ??_C@_02PHMGELLB@?6?6?$AA@
	mov	eax, DWORD PTR _x$32784[ebp]
	shl	eax, 6
	mov	esi, esp
	mov	ecx, DWORD PTR _pa$[ebp]
	mov	edx, DWORD PTR [ecx+eax+60]
	push	edx
	push	OFFSET ??_C@_08BOMOONKD@Skillz?3?7?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 430  : 	}

	jmp	$LN2@display3
$LN4@display3:

; 431  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?display3@@YAXQBUstudent@@H@Z ENDP			; display3
_TEXT	ENDS
PUBLIC	??_C@_05KOJMJHML@Done?6?$AA@			; `string'
PUBLIC	??_C@_0BD@EMANHFLA@Enter?5class?5size?3?5?$AA@	; `string'
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
;	COMDAT ??_C@_05KOJMJHML@Done?6?$AA@
CONST	SEGMENT
??_C@_05KOJMJHML@Done?6?$AA@ DB 'Done', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EMANHFLA@Enter?5class?5size?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@EMANHFLA@Enter?5class?5size?3?5?$AA@ DB 'Enter class size: ', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex9@@YAXXZ
_TEXT	SEGMENT
$T40369 = -260						; size = 4
$T40370 = -248						; size = 4
_i$32808 = -44						; size = 4
_entered$ = -32						; size = 4
_ptr_stu$ = -20						; size = 4
_class_size$ = -8					; size = 4
?ch7_ex9@@YAXXZ PROC					; ch7_ex9, COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 434  : 	cout << "Enter class size: ";

	push	OFFSET ??_C@_0BD@EMANHFLA@Enter?5class?5size?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 435  : 	int class_size;
; 436  : 	cin >> class_size;

	mov	esi, esp
	lea	eax, DWORD PTR _class_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@ch7_ex9:

; 437  : 	while (cin.get() != '\n')

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN4@ch7_ex9

; 438  : 		continue;

	jmp	SHORT $LN5@ch7_ex9
	jmp	SHORT $LN5@ch7_ex9
$LN4@ch7_ex9:

; 439  : 
; 440  : 	student * ptr_stu = new student[class_size];

	xor	ecx, ecx
	mov	eax, DWORD PTR _class_size$[ebp]
	mov	edx, 64					; 00000040H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T40369[ebp], eax
	mov	eax, DWORD PTR $T40369[ebp]
	mov	DWORD PTR _ptr_stu$[ebp], eax

; 441  : 	int entered = getinfo(ptr_stu, class_size);

	mov	eax, DWORD PTR _class_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr_stu$[ebp]
	push	ecx
	call	?getinfo@@YAHQAUstudent@@H@Z		; getinfo
	add	esp, 8
	mov	DWORD PTR _entered$[ebp], eax

; 442  : 	for (int i = 0; i < entered; i++)

	mov	DWORD PTR _i$32808[ebp], 0
	jmp	SHORT $LN3@ch7_ex9
$LN2@ch7_ex9:
	mov	eax, DWORD PTR _i$32808[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32808[ebp], eax
$LN3@ch7_ex9:
	mov	eax, DWORD PTR _i$32808[ebp]
	cmp	eax, DWORD PTR _entered$[ebp]
	jge	SHORT $LN1@ch7_ex9

; 443  : 	{
; 444  : 		display1(ptr_stu[i]);

	mov	esi, DWORD PTR _i$32808[ebp]
	shl	esi, 6
	add	esi, DWORD PTR _ptr_stu$[ebp]
	sub	esp, 64					; 00000040H
	mov	ecx, 16					; 00000010H
	mov	edi, esp
	rep movsd
	call	?display1@@YAXUstudent@@@Z		; display1
	add	esp, 64					; 00000040H

; 445  : 		display2(&ptr_stu[i]);

	mov	eax, DWORD PTR _i$32808[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _ptr_stu$[ebp]
	push	eax
	call	?display2@@YAXPBUstudent@@@Z		; display2
	add	esp, 4

; 446  : 	}

	jmp	SHORT $LN2@ch7_ex9
$LN1@ch7_ex9:

; 447  : 	display3(ptr_stu, entered);

	mov	eax, DWORD PTR _entered$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr_stu$[ebp]
	push	ecx
	call	?display3@@YAXQBUstudent@@H@Z		; display3
	add	esp, 8

; 448  : 	delete [] ptr_stu;

	mov	eax, DWORD PTR _ptr_stu$[ebp]
	mov	DWORD PTR $T40370[ebp], eax
	mov	ecx, DWORD PTR $T40370[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 449  : 	cout << "Done\n";

	push	OFFSET ??_C@_05KOJMJHML@Done?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 450  : 	//return 0;
; 451  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ch7_ex9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ch7_ex9:
	DD	1
	DD	$LN9@ch7_ex9
$LN9@ch7_ex9:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@ch7_ex9
$LN8@ch7_ex9:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?ch7_ex9@@YAXXZ ENDP					; ch7_ex9
_TEXT	ENDS
PUBLIC	?calculate@@YANNNP6ANNN@Z@Z			; calculate
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?calculate@@YANNNP6ANNN@Z@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_pf$ = 24						; size = 4
?calculate@@YANNNP6ANNN@Z@Z PROC			; calculate, COMDAT

; 455  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 456  : 	return pf(x, y);

	mov	esi, esp
	sub	esp, 8
	fld	QWORD PTR _y$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _x$[ebp]
	fstp	QWORD PTR [esp]
	call	DWORD PTR _pf$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 457  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?calculate@@YANNNP6ANNN@Z@Z ENDP			; calculate
_TEXT	ENDS
PUBLIC	?add@@YANNN@Z					; add
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?add@@YANNN@Z
_TEXT	SEGMENT
_p$ = 8							; size = 8
_q$ = 16						; size = 8
?add@@YANNN@Z PROC					; add, COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 461  : 	return p + q;

	fld	QWORD PTR _p$[ebp]
	fadd	QWORD PTR _q$[ebp]

; 462  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?add@@YANNN@Z ENDP					; add
_TEXT	ENDS
PUBLIC	?subtract@@YANNN@Z				; subtract
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?subtract@@YANNN@Z
_TEXT	SEGMENT
_p$ = 8							; size = 8
_q$ = 16						; size = 8
?subtract@@YANNN@Z PROC					; subtract, COMDAT

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 466  : 	return p - q;

	fld	QWORD PTR _p$[ebp]
	fsub	QWORD PTR _q$[ebp]

; 467  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?subtract@@YANNN@Z ENDP					; subtract
_TEXT	ENDS
PUBLIC	??_C@_08PABDFCEO@Another?6?$AA@			; `string'
PUBLIC	??_C@_09KFNBHLDK@Value?52?3?5?$AA@		; `string'
PUBLIC	??_C@_09LHGENENE@Value?51?3?5?$AA@		; `string'
PUBLIC	??_C@_0DH@ODCJBCHI@Enter?5two?5double?5values?5to?5be?5tr@ ; `string'
;	COMDAT ??_C@_08PABDFCEO@Another?6?$AA@
CONST	SEGMENT
??_C@_08PABDFCEO@Another?6?$AA@ DB 'Another', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFNBHLDK@Value?52?3?5?$AA@
CONST	SEGMENT
??_C@_09KFNBHLDK@Value?52?3?5?$AA@ DB 'Value 2: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LHGENENE@Value?51?3?5?$AA@
CONST	SEGMENT
??_C@_09LHGENENE@Value?51?3?5?$AA@ DB 'Value 1: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ODCJBCHI@Enter?5two?5double?5values?5to?5be?5tr@
CONST	SEGMENT
??_C@_0DH@ODCJBCHI@Enter?5two?5double?5values?5to?5be?5tr@ DB 'Enter two '
	DB	'double values to be transmuted <q to quit>: ', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch7_ex10@@YAXXZ
_TEXT	SEGMENT
$T40382 = -232						; size = 4
_o$ = -28						; size = 8
_n$ = -12						; size = 8
?ch7_ex10@@YAXXZ PROC					; ch7_ex10, COMDAT

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	double n, o;
; 471  : 	n = o = 0.0;

	fldz
	fstp	QWORD PTR _o$[ebp]
	fld	QWORD PTR _o$[ebp]
	fstp	QWORD PTR _n$[ebp]

; 472  : 	cout << "Enter two double values to be transmuted <q to quit>: ";

	push	OFFSET ??_C@_0DH@ODCJBCHI@Enter?5two?5double?5values?5to?5be?5tr@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN2@ch7_ex10:

; 473  : 	while (cin >> n >> o)

	mov	esi, esp
	lea	eax, DWORD PTR _o$[ebp]
	push	eax
	mov	edi, esp
	lea	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40382[ebp], eax
	mov	edx, DWORD PTR $T40382[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40382[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN1@ch7_ex10

; 474  : 	{
; 475  : 		cout << "Value 1: " << calculate(n, o, add) << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ?add@@YANNN@Z			; add
	sub	esp, 8
	fld	QWORD PTR _o$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _n$[ebp]
	fstp	QWORD PTR [esp]
	call	?calculate@@YANNNP6ANNN@Z@Z		; calculate
	add	esp, 20					; 00000014H
	mov	edi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09LHGENENE@Value?51?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 476  : 		cout << "Value 2: " << calculate(n, o, subtract) << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ?subtract@@YANNN@Z		; subtract
	sub	esp, 8
	fld	QWORD PTR _o$[ebp]
	fstp	QWORD PTR [esp]
	sub	esp, 8
	fld	QWORD PTR _n$[ebp]
	fstp	QWORD PTR [esp]
	call	?calculate@@YANNNP6ANNN@Z@Z		; calculate
	add	esp, 20					; 00000014H
	mov	edi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_09KFNBHLDK@Value?52?3?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 477  : 		cout << "Another\n";

	push	OFFSET ??_C@_08PABDFCEO@Another?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 478  : 	}

	jmp	$LN2@ch7_ex10
$LN1@ch7_ex10:

; 479  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ch7_ex10
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@ch7_ex10:
	DD	2
	DD	$LN7@ch7_ex10
$LN7@ch7_ex10:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@ch7_ex10
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN6@ch7_ex10
$LN6@ch7_ex10:
	DB	111					; 0000006fH
	DB	0
$LN5@ch7_ex10:
	DB	110					; 0000006eH
	DB	0
?ch7_ex10@@YAXXZ ENDP					; ch7_ex10
_TEXT	ENDS
PUBLIC	__real@4000000000000000
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?harmony@@YANNN@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
_y$ = 16						; size = 8
?harmony@@YANNN@Z PROC					; harmony, COMDAT

; 483  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 484  : 	return 2.0*x*y/(x+y);

	fld	QWORD PTR __real@4000000000000000
	fmul	QWORD PTR _x$[ebp]
	fmul	QWORD PTR _y$[ebp]
	fld	QWORD PTR _x$[ebp]
	fadd	QWORD PTR _y$[ebp]
	fdivp	ST(1), ST(0)

; 485  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?harmony@@YANNN@Z ENDP					; harmony
_TEXT	ENDS
PUBLIC	??_C@_0CG@JFIACGOE@Enter?5golf?5scores?5to?5be?5crunched@ ; `string'
;	COMDAT ??_C@_0CG@JFIACGOE@Enter?5golf?5scores?5to?5be?5crunched@
CONST	SEGMENT
??_C@_0CG@JFIACGOE@Enter?5golf?5scores?5to?5be?5crunched@ DB 'Enter golf '
	DB	'scores to be crunched', 0aH, '#1: ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?golfread@@YAPAHH@Z
_TEXT	SEGMENT
$T40393 = -236						; size = 4
$T40394 = -224						; size = 4
_loop$32873 = -20					; size = 4
_scores$ = -8						; size = 4
_arraysize$ = 8						; size = 4
?golfread@@YAPAHH@Z PROC				; golfread, COMDAT

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 489  : 	int * scores = new int[arraysize];

	xor	ecx, ecx
	mov	eax, DWORD PTR _arraysize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T40393[ebp], eax
	mov	eax, DWORD PTR $T40393[ebp]
	mov	DWORD PTR _scores$[ebp], eax

; 490  : 	
; 491  : 	cout << "Enter golf scores to be crunched\n#1: ";

	push	OFFSET ??_C@_0CG@JFIACGOE@Enter?5golf?5scores?5to?5be?5crunched@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 492  : 
; 493  : 	for (int loop = 0; loop < arraysize && cin >> scores[loop]; ++loop)

	mov	DWORD PTR _loop$32873[ebp], 0
	jmp	SHORT $LN3@golfread
$LN2@golfread:
	mov	eax, DWORD PTR _loop$32873[ebp]
	add	eax, 1
	mov	DWORD PTR _loop$32873[ebp], eax
$LN3@golfread:
	mov	eax, DWORD PTR _loop$32873[ebp]
	cmp	eax, DWORD PTR _arraysize$[ebp]
	jge	$LN1@golfread
	mov	eax, DWORD PTR _loop$32873[ebp]
	mov	ecx, DWORD PTR _scores$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40394[ebp], eax
	mov	eax, DWORD PTR $T40394[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR $T40394[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@golfread

; 494  : 		cout << "#" << loop+1 << ": ";

	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	eax, DWORD PTR _loop$32873[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_01IPJKGB@?$CD?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	jmp	$LN2@golfread
$LN1@golfread:

; 495  : 
; 496  : 	return scores;

	mov	eax, DWORD PTR _scores$[ebp]

; 497  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?golfread@@YAPAHH@Z ENDP				; golfread
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -352						; size = 8
tv293 = -345						; size = 1
tv286 = -345						; size = 1
tv345 = -344						; size = 8
tv292 = -344						; size = 4
tv285 = -344						; size = 4
tv291 = -340						; size = 4
tv288 = -340						; size = 8
tv284 = -340						; size = 4
tv331 = -336						; size = 8
tv290 = -336						; size = 4
tv283 = -336						; size = 4
tv287 = -332						; size = 4
tv137 = -332						; size = 4
tv289 = -329						; size = 1
tv282 = -329						; size = 1
$T40399 = -324						; size = 4
$T40400 = -312						; size = 4
$T40401 = -300						; size = 4
$T40402 = -288						; size = 4
$T40403 = -276						; size = 4
__Ok$ = -72						; size = 8
__Pad$ = -56						; size = 8
__Count$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv331[ebp], eax
	mov	DWORD PTR tv331[ebp+4], edx
	cmp	DWORD PTR tv331[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	cmp	DWORD PTR tv331[ebp], 0
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv345[ebp], eax
	mov	DWORD PTR tv345[ebp+4], edx
	mov	eax, DWORD PTR tv345[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN26@operator
	mov	ecx, DWORD PTR tv345[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN26@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	DWORD PTR tv135[ebp], 0
	mov	DWORD PTR tv135[ebp+4], 0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	jne	SHORT $LN14@operator

; 777  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 778  : 	else

	jmp	$LN13@operator
$LN14@operator:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator
	jmp	SHORT $LN10@operator
$LN9@operator:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN10@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN27@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN27@operator:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv282[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv283[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv282[ebp]
	push	eax
	mov	ecx, DWORD PTR tv283[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	mov	DWORD PTR $T40399[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv285[ebp], eax
	mov	edx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T40400[ebp], edx
	lea	eax, DWORD PTR $T40399[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40400[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv286[ebp], al
	movzx	edx, BYTE PTR tv286[ebp]
	test	edx, edx
	je	SHORT $LN7@operator

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 787  : 					break;

	jmp	SHORT $LN11@operator
$LN7@operator:

; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit

	jmp	$LN9@operator
$LN11@operator:

; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN28@operator
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN6@operator
$LN28@operator:

; 792  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator
	jmp	SHORT $LN4@operator
$LN3@operator:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN5@operator
	jg	SHORT $LN29@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN5@operator
$LN29@operator:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T40401[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv292[ebp], eax
	mov	edx, DWORD PTR tv292[ebp]
	mov	DWORD PTR $T40402[ebp], edx
	lea	eax, DWORD PTR $T40401[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40402[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv293[ebp], al
	movzx	edx, BYTE PTR tv293[ebp]
	test	edx, edx
	je	SHORT $LN1@operator

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 800  : 					break;

	jmp	SHORT $LN5@operator
$LN1@operator:

; 801  : 					}

	jmp	$LN3@operator
$LN5@operator:

; 802  : 		_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN13@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 807  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T40403[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T40403[ebp]

; 808  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@operator:
	DD	1
	DD	$LN32@operator
$LN32@operator:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN30@operator
$LN30@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 491  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 492  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 553  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 562  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 563  : 		return (EOF);

	or	eax, -1

; 564  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 118  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

	mov	esi, esp
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry@2

; 124  : 				this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 132  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1

; 134  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 92   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas:

; 94   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 97   : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@2:

; 100  : 			}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv284 = -353						; size = 1
tv275 = -353						; size = 1
tv283 = -352						; size = 4
tv274 = -352						; size = 4
tv95 = -352						; size = 8
tv279 = -349						; size = 1
tv282 = -348						; size = 4
tv278 = -348						; size = 4
tv273 = -348						; size = 4
tv318 = -344						; size = 8
tv281 = -344						; size = 4
tv277 = -344						; size = 4
tv272 = -344						; size = 4
tv276 = -340						; size = 4
tv65 = -340						; size = 4
tv280 = -337						; size = 1
tv271 = -337						; size = 1
$T40463 = -332						; size = 4
$T40464 = -320						; size = 4
$T40465 = -308						; size = 4
$T40466 = -296						; size = 4
$T40467 = -284						; size = 4
$T40468 = -272						; size = 4
$T40469 = -260						; size = 4
__Pad$37594 = -56					; size = 8
__Ok$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 813  : 	{	// insert a char into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 814  : 	typedef char _Elem;
; 815  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 816  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 817  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 818  : 
; 819  : 	if (_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	je	$LN12@operator@2

; 820  : 		{	// state okay, insert
; 821  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv318[ebp], eax
	mov	DWORD PTR tv318[ebp+4], edx
	cmp	DWORD PTR tv318[ebp+4], 0
	jg	SHORT $LN15@operator@2
	jl	SHORT $LN23@operator@2
	cmp	DWORD PTR tv318[ebp], 1
	ja	SHORT $LN15@operator@2
$LN23@operator@2:
	mov	DWORD PTR tv95[ebp], 0
	mov	DWORD PTR tv95[ebp+4], 0
	jmp	SHORT $LN16@operator@2
$LN15@operator@2:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	sbb	edx, 0
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], edx
$LN16@operator@2:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR __Pad$37594[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp+4]
	mov	DWORD PTR __Pad$37594[ebp+4], ecx

; 822  : 
; 823  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 824  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN10@operator@2
	jmp	SHORT $LN9@operator@2
$LN8@operator@2:

; 825  : 			for (; _State == ios_base::goodbit && 0 < _Pad;
; 826  : 				--_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$37594[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$37594[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$37594[ebp], eax
	mov	DWORD PTR __Pad$37594[ebp+4], ecx
$LN9@operator@2:
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN10@operator@2
	cmp	DWORD PTR __Pad$37594[ebp+4], 0
	jl	$LN10@operator@2
	jg	SHORT $LN24@operator@2
	cmp	DWORD PTR __Pad$37594[ebp], 0
	jbe	$LN10@operator@2
$LN24@operator@2:

; 827  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 828  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv271[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv272[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv271[ebp]
	push	eax
	mov	ecx, DWORD PTR tv272[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv273[ebp], eax
	mov	ecx, DWORD PTR tv273[ebp]
	mov	DWORD PTR $T40463[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv274[ebp], eax
	mov	edx, DWORD PTR tv274[ebp]
	mov	DWORD PTR $T40464[ebp], edx
	lea	eax, DWORD PTR $T40463[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40464[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv275[ebp], al
	movzx	edx, BYTE PTR tv275[ebp]
	test	edx, edx
	je	SHORT $LN6@operator@2

; 829  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator@2:

; 830  : 
; 831  : 		if (_State == ios_base::goodbit

	jmp	$LN8@operator@2
$LN10@operator@2:

; 832  : 			&& _Traits::eq_int_type(_Traits::eof(),
; 833  : 				_Ostr.rdbuf()->sputc(_Ch)))

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator@2
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv276[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv276[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv277[ebp], eax
	mov	ecx, DWORD PTR tv277[ebp]
	mov	DWORD PTR $T40465[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv278[ebp], eax
	mov	edx, DWORD PTR tv278[ebp]
	mov	DWORD PTR $T40466[ebp], edx
	lea	eax, DWORD PTR $T40465[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40466[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv279[ebp], al
	movzx	edx, BYTE PTR tv279[ebp]
	test	edx, edx
	je	SHORT $LN5@operator@2

; 834  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN5@operator@2:

; 835  : 
; 836  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

	jmp	SHORT $LN4@operator@2
$LN3@operator@2:

; 837  : 			--_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$37594[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$37594[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$37594[ebp], eax
	mov	DWORD PTR __Pad$37594[ebp+4], ecx
$LN4@operator@2:
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN2@operator@2
	cmp	DWORD PTR __Pad$37594[ebp+4], 0
	jl	$LN2@operator@2
	jg	SHORT $LN25@operator@2
	cmp	DWORD PTR __Pad$37594[ebp], 0
	jbe	$LN2@operator@2
$LN25@operator@2:

; 838  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 839  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv280[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv281[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv280[ebp]
	push	eax
	mov	ecx, DWORD PTR tv281[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv282[ebp], eax
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR $T40467[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv283[ebp], eax
	mov	edx, DWORD PTR tv283[ebp]
	mov	DWORD PTR $T40468[ebp], edx
	lea	eax, DWORD PTR $T40467[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40468[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv284[ebp], al
	movzx	edx, BYTE PTR tv284[ebp]
	test	edx, edx
	je	SHORT $LN1@operator@2

; 840  : 				_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN1@operator@2:

; 841  : 		_CATCH_IO_(_Ostr)

	jmp	$LN3@operator@2
$LN2@operator@2:
	jmp	SHORT $LN17@operator@2
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:
	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN12@operator@2
	ret	0
$LN17@operator@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@2:

; 842  : 		}
; 843  : 
; 844  : 	_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 845  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 846  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T40469[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T40469[ebp]

; 847  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@operator@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@operator@2:
	DD	1
	DD	$LN28@operator@2
$LN28@operator@2:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN26@operator@2
$LN26@operator@2:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
END
