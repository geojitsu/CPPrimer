; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\Tools\Dev\Workspace\VS2010\Projects\cpprimer\cpprimer\ch6_exAll.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_C@_0CD@CJADHKGD@Select?5another?5exercise?5to?5debug@ ; `string'
PUBLIC	??_C@_0CG@JLBMHMGD@Invalid?5selection?0?5enter?5exercis@ ; `string'
PUBLIC	?ch6_ex10@@YAXXZ				; ch6_ex10
PUBLIC	?ch6_ex9@@YAXXZ					; ch6_ex9
PUBLIC	?ch6_ex8@@YAXXZ					; ch6_ex8
PUBLIC	?ch6_ex7@@YAXXZ					; ch6_ex7
PUBLIC	?ch6_ex6@@YAXXZ					; ch6_ex6
PUBLIC	?ch6_ex5@@YAXXZ					; ch6_ex5
PUBLIC	?ch6_ex4@@YAXXZ					; ch6_ex4
PUBLIC	?ch6_ex3@@YAXXZ					; ch6_ex3
PUBLIC	?ch6_ex2@@YAXXZ					; ch6_ex2
PUBLIC	?ch6_ex1@@YAXXZ					; ch6_ex1
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_0DB@JDDIMMOD@Por?5Favore?0?5Select?5a?5chapter?5exe@ ; `string'
PUBLIC	_main
EXTRN	__imp_??Bios_base@std@@QBEPAXXZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0CD@CJADHKGD@Select?5another?5exercise?5to?5debug@
; File d:\tools\dev\workspace\vs2010\projects\cpprimer\cpprimer\ch6_exall.cpp
CONST	SEGMENT
??_C@_0CD@CJADHKGD@Select?5another?5exercise?5to?5debug@ DB 'Select anoth'
	DB	'er exercise to debug: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JLBMHMGD@Invalid?5selection?0?5enter?5exercis@
CONST	SEGMENT
??_C@_0CG@JLBMHMGD@Invalid?5selection?0?5enter?5exercis@ DB 'Invalid sele'
	DB	'ction, enter exercise #: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JDDIMMOD@Por?5Favore?0?5Select?5a?5chapter?5exe@
CONST	SEGMENT
??_C@_0DB@JDDIMMOD@Por?5Favore?0?5Select?5a?5chapter?5exe@ DB 'Por Favore'
	DB	', Select a chapter exercise to debug: ', 00H ; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _main
_TEXT	SEGMENT
tv81 = -220						; size = 4
$T40827 = -212						; size = 4
_chapter$ = -8						; size = 4
_main	PROC						; COMDAT

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 24   : 	int chapter;
; 25   : 
; 26   : 	
; 27   : 	cout << "Por Favore, Select a chapter exercise to debug: ";

	push	OFFSET ??_C@_0DB@JDDIMMOD@Por?5Favore?0?5Select?5a?5chapter?5exe@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN15@main:

; 28   : 	
; 29   : 	while (cin >> chapter)

	mov	esi, esp
	lea	eax, DWORD PTR _chapter$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40827[ebp], eax
	mov	ecx, DWORD PTR $T40827[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T40827[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN16@main

; 30   : 	{
; 31   : 		switch (chapter)

	mov	eax, DWORD PTR _chapter$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 9
	ja	SHORT $LN1@main
	mov	edx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN21@main[edx*4]
$LN11@main:

; 32   : 		{
; 33   : 			case 1 : ch6_ex1(); break;

	call	?ch6_ex1@@YAXXZ				; ch6_ex1
	jmp	SHORT $LN12@main
$LN10@main:

; 34   : 			case 2 : ch6_ex2(); break;

	call	?ch6_ex2@@YAXXZ				; ch6_ex2
	jmp	SHORT $LN12@main
$LN9@main:

; 35   : 			case 3 : ch6_ex3(); break;

	call	?ch6_ex3@@YAXXZ				; ch6_ex3
	jmp	SHORT $LN12@main
$LN8@main:

; 36   : 			case 4 : ch6_ex4(); break;

	call	?ch6_ex4@@YAXXZ				; ch6_ex4
	jmp	SHORT $LN12@main
$LN7@main:

; 37   : 			case 5 : ch6_ex5(); break;

	call	?ch6_ex5@@YAXXZ				; ch6_ex5
	jmp	SHORT $LN12@main
$LN6@main:

; 38   : 			case 6 : ch6_ex6(); break;

	call	?ch6_ex6@@YAXXZ				; ch6_ex6
	jmp	SHORT $LN12@main
$LN5@main:

; 39   : 			case 7 : ch6_ex7(); break;

	call	?ch6_ex7@@YAXXZ				; ch6_ex7
	jmp	SHORT $LN12@main
$LN4@main:

; 40   : 			case 8 : ch6_ex8(); break;

	call	?ch6_ex8@@YAXXZ				; ch6_ex8
	jmp	SHORT $LN12@main
$LN3@main:

; 41   : 			case 9 : ch6_ex9(); break;

	call	?ch6_ex9@@YAXXZ				; ch6_ex9
	jmp	SHORT $LN12@main
$LN2@main:

; 42   : 			case 10 : ch6_ex10(); break;

	call	?ch6_ex10@@YAXXZ			; ch6_ex10
	jmp	SHORT $LN12@main
$LN1@main:

; 43   : 			default : cout << "Invalid selection, enter exercise #: "; break;

	push	OFFSET ??_C@_0CG@JLBMHMGD@Invalid?5selection?0?5enter?5exercis@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN12@main:

; 44   : 		}
; 45   : 		cout << "Select another exercise to debug: ";

	push	OFFSET ??_C@_0CD@CJADHKGD@Select?5another?5exercise?5to?5debug@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 46   : 	}

	jmp	$LN15@main
$LN16@main:

; 47   : }

	xor	eax, eax
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@main:
	DD	1
	DD	$LN19@main
$LN19@main:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@main
$LN18@main:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN21@main:
	DD	$LN11@main
	DD	$LN10@main
	DD	$LN9@main
	DD	$LN8@main
	DD	$LN7@main
	DD	$LN6@main
	DD	$LN5@main
	DD	$LN4@main
	DD	$LN3@main
	DD	$LN2@main
_main	ENDP
_TEXT	ENDS
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_0DG@CEMFHIMI@Enter?5alphanumeric?5text?5?$DMtermina@ ; `string'
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z:PROC
EXTRN	__imp__toupper:PROC
EXTRN	__imp__islower:PROC
EXTRN	__imp__tolower:PROC
EXTRN	__imp__isupper:PROC
EXTRN	__imp__isdigit:PROC
EXTRN	__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@AAD@Z:PROC
EXTRN	__imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
;	COMDAT ??_C@_0DG@CEMFHIMI@Enter?5alphanumeric?5text?5?$DMtermina@
CONST	SEGMENT
??_C@_0DG@CEMFHIMI@Enter?5alphanumeric?5text?5?$DMtermina@ DB 'Enter alph'
	DB	'anumeric text <terminate pressing ''@'' key>', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch6_ex1@@YAXXZ
_TEXT	SEGMENT
$T40844 = -212						; size = 4
_ch$ = -5						; size = 1
?ch6_ex1@@YAXXZ PROC					; ch6_ex1, COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   : 
; 52   : 	char ch;
; 53   : 
; 54   : 	cout << "Enter alphanumeric text <terminate pressing '@' key>\n";

	push	OFFSET ??_C@_0DG@CEMFHIMI@Enter?5alphanumeric?5text?5?$DMtermina@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 55   : 	cin.get();

	mov	esi, esp
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ch6_ex1:

; 56   : 	while ((cin.get(ch)) && ch != '@')

	mov	esi, esp
	lea	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_?get@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@AAD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40844[ebp], eax
	mov	ecx, DWORD PTR $T40844[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T40844[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN5@ch6_ex1
	movsx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 64					; 00000040H
	je	$LN5@ch6_ex1

; 57   : 		if (!isdigit(ch))

	movsx	eax, BYTE PTR _ch$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__isdigit
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN4@ch6_ex1

; 58   : 		{
; 59   : 			if (isupper((int) ch))

	movsx	eax, BYTE PTR _ch$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__isupper
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@ch6_ex1

; 60   : 				ch = tolower(ch);

	movsx	eax, BYTE PTR _ch$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__tolower
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _ch$[ebp], al
	jmp	SHORT $LN2@ch6_ex1
$LN3@ch6_ex1:

; 61   : 			else if (islower((int) ch))

	movsx	eax, BYTE PTR _ch$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__islower
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@ch6_ex1

; 62   : 				ch = toupper(ch);

	movsx	eax, BYTE PTR _ch$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _ch$[ebp], al
$LN2@ch6_ex1:

; 63   : 			cout << ch;

	movzx	eax, BYTE PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN4@ch6_ex1:

; 64   : 		}

	jmp	$LN6@ch6_ex1
$LN5@ch6_ex1:

; 65   : 		
; 66   : 		cout << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 67   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ch6_ex1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@ch6_ex1:
	DD	1
	DD	$LN10@ch6_ex1
$LN10@ch6_ex1:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN9@ch6_ex1
$LN9@ch6_ex1:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?ch6_ex1@@YAXXZ ENDP					; ch6_ex1
_TEXT	ENDS
PUBLIC	??_C@_0BM@FKPLBHNO@Donation?5from?5Participant?5?$CD?$AA@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BL@DODIJGKI@The?5Average?5Donation?5was?5$?$AA@ ; `string'
PUBLIC	??_C@_0GB@KHCCPLPJ@The?5following?5donations?5wetre?5gr@ ; `string'
PUBLIC	??_C@_0L@CLEGHKBH@Donation?5?$CD?$AA@		; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_06IEAFMNNH@Enter?5?$AA@			; `string'
PUBLIC	??_C@_0CD@MJPKKCHM@?5donations?5of?5those?5kind?5citizen@ ; `string'
PUBLIC	??_C@_06FOAMAKGB@While?5?$AA@			; `string'
PUBLIC	??_C@_0BA@GKNHLIII@?5is?5at?5address?5?$AA@	; `string'
PUBLIC	__real@400b333333333333
PUBLIC	__real@0000000000000000
PUBLIC	__$ArrayPad$
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BM@FKPLBHNO@Donation?5from?5Participant?5?$CD?$AA@
CONST	SEGMENT
??_C@_0BM@FKPLBHNO@Donation?5from?5Participant?5?$CD?$AA@ DB 'Donation fr'
	DB	'om Participant #', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DODIJGKI@The?5Average?5Donation?5was?5$?$AA@
CONST	SEGMENT
??_C@_0BL@DODIJGKI@The?5Average?5Donation?5was?5$?$AA@ DB 'The Average Do'
	DB	'nation was $', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@KHCCPLPJ@The?5following?5donations?5wetre?5gr@
CONST	SEGMENT
??_C@_0GB@KHCCPLPJ@The?5following?5donations?5wetre?5gr@ DB 'The followin'
	DB	'g donations wetre greater then the median and deserve praise', 0aH
	DB	'Can I get a whiiitness', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CLEGHKBH@Donation?5?$CD?$AA@
CONST	SEGMENT
??_C@_0L@CLEGHKBH@Donation?5?$CD?$AA@ DB 'Donation #', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEAFMNNH@Enter?5?$AA@
CONST	SEGMENT
??_C@_06IEAFMNNH@Enter?5?$AA@ DB 'Enter ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MJPKKCHM@?5donations?5of?5those?5kind?5citizen@
CONST	SEGMENT
??_C@_0CD@MJPKKCHM@?5donations?5of?5those?5kind?5citizen@ DB ' donations '
	DB	'of those kind citizens', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOAMAKGB@While?5?$AA@
CONST	SEGMENT
??_C@_06FOAMAKGB@While?5?$AA@ DB 'While ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GKNHLIII@?5is?5at?5address?5?$AA@
CONST	SEGMENT
??_C@_0BA@GKNHLIII@?5is?5at?5address?5?$AA@ DB ' is at address ', 00H ; `string'
CONST	ENDS
;	COMDAT __real@400b333333333333
CONST	SEGMENT
__real@400b333333333333 DQ 0400b333333333333r	; 3.4
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch6_ex2@@YAXXZ
_TEXT	SEGMENT
$T40851 = -404						; size = 4
$T40852 = -392						; size = 4
$T40853 = -380						; size = 4
_y$33665 = -176						; size = 4
_x$33596 = -164						; size = 4
_x$33548 = -152						; size = 4
_x$ = -140						; size = 4
_sum$ = -128						; size = 8
_donate$ = -112						; size = 4
_donations$ = -100					; size = 80
_numOfDonations$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
?ch6_ex2@@YAXXZ PROC					; ch6_ex2, COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 71   : 	const int numOfDonations = 10;

	mov	DWORD PTR _numOfDonations$[ebp], 10	; 0000000aH

; 72   : 	double donations[numOfDonations] = {0.0};

	fldz
	fstp	QWORD PTR _donations$[ebp]
	push	72					; 00000048H
	push	0
	lea	eax, DWORD PTR _donations$[ebp+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 73   : 	double *donate = new double[numOfDonations];

	push	80					; 00000050H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T40851[ebp], eax
	mov	eax, DWORD PTR $T40851[ebp]
	mov	DWORD PTR _donate$[ebp], eax

; 74   : 	double sum = 0.0;

	fldz
	fstp	QWORD PTR _sum$[ebp]

; 75   : 	int x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 76   : 
; 77   : 	*(donate) = 0.0;

	mov	eax, DWORD PTR _donate$[ebp]
	fldz
	fstp	QWORD PTR [eax]

; 78   : 	*(donate+1) = 3.4;

	mov	eax, DWORD PTR _donate$[ebp]
	fld	QWORD PTR __real@400b333333333333
	fstp	QWORD PTR [eax+8]

; 79   : 	cout << &donate << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	lea	ecx, DWORD PTR _donate$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   : 	for (int x = 0; x < numOfDonations; x++)

	mov	DWORD PTR _x$33548[ebp], 0
	jmp	SHORT $LN13@ch6_ex2
$LN12@ch6_ex2:
	mov	eax, DWORD PTR _x$33548[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33548[ebp], eax
$LN13@ch6_ex2:
	cmp	DWORD PTR _x$33548[ebp], 10		; 0000000aH
	jge	SHORT $LN11@ch6_ex2

; 81   : 		cout << *(donate+x) << " is at address " << (double *) &donate+x << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33548[ebp]
	lea	edx, DWORD PTR _donate$[ebp+ecx*8]
	mov	edi, esp
	push	edx
	push	OFFSET ??_C@_0BA@GKNHLIII@?5is?5at?5address?5?$AA@
	mov	ebx, esp
	mov	eax, DWORD PTR _x$33548[ebp]
	mov	ecx, DWORD PTR _donate$[ebp]
	sub	esp, 8
	fld	QWORD PTR [ecx+eax*8]
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN12@ch6_ex2
$LN11@ch6_ex2:

; 82   : 	for (int x = 0; x < numOfDonations; x++)	

	mov	DWORD PTR _x$33596[ebp], 0
	jmp	SHORT $LN10@ch6_ex2
$LN9@ch6_ex2:
	mov	eax, DWORD PTR _x$33596[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33596[ebp], eax
$LN10@ch6_ex2:
	cmp	DWORD PTR _x$33596[ebp], 10		; 0000000aH
	jge	SHORT $LN8@ch6_ex2

; 83   : 		cout << "While " << donations[x] << " is at address " << &donations+x << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33596[ebp]
	imul	ecx, 80					; 00000050H
	lea	edx, DWORD PTR _donations$[ebp+ecx]
	mov	edi, esp
	push	edx
	push	OFFSET ??_C@_0BA@GKNHLIII@?5is?5at?5address?5?$AA@
	mov	ebx, esp
	mov	eax, DWORD PTR _x$33596[ebp]
	sub	esp, 8
	fld	QWORD PTR _donations$[ebp+eax*8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06FOAMAKGB@While?5?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN9@ch6_ex2
$LN8@ch6_ex2:

; 84   : 	
; 85   : 		
; 86   : 	cout << "Enter " << numOfDonations << " donations of those kind citizens\n";

	push	OFFSET ??_C@_0CD@MJPKKCHM@?5donations?5of?5those?5kind?5citizen@
	mov	esi, esp
	push	10					; 0000000aH
	push	OFFSET ??_C@_06IEAFMNNH@Enter?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	jmp	SHORT $LN7@ch6_ex2
$LN6@ch6_ex2:

; 87   : 
; 88   : 	for (; x < numOfDonations && cout << "Donation #" << x+1 << ": " && cin >> donations[x]; x++)

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN7@ch6_ex2:
	cmp	DWORD PTR _x$[ebp], 10			; 0000000aH
	jge	$LN5@ch6_ex2
	push	OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0L@CLEGHKBH@Donation?5?$CD?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	DWORD PTR $T40852[ebp], eax
	mov	edx, DWORD PTR $T40852[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40852[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@ch6_ex2
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR _donations$[ebp+eax*8]
	mov	esi, esp
	push	ecx
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAN@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T40853[ebp], eax
	mov	edx, DWORD PTR $T40853[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40853[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@ch6_ex2

; 89   : 		sum += donations[x];

	mov	eax, DWORD PTR _x$[ebp]
	fld	QWORD PTR _sum$[ebp]
	fadd	QWORD PTR _donations$[ebp+eax*8]
	fstp	QWORD PTR _sum$[ebp]
	jmp	$LN6@ch6_ex2
$LN5@ch6_ex2:

; 90   : 		
; 91   : 	cout << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 92   : 
; 93   : 	cout << "The Average Donation was $" << (sum / x) << endl
; 94   : 		 << "The following donations wetre greater then the median and deserve praise\nCan I get a whiiitness\n";

	push	OFFSET ??_C@_0GB@KHCCPLPJ@The?5following?5donations?5wetre?5gr@
	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	fild	DWORD PTR _x$[ebp]
	fdivr	QWORD PTR _sum$[ebp]
	mov	edi, esp
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BL@DODIJGKI@The?5Average?5Donation?5was?5$?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 95   : 	
; 96   : 	for (int y = 0; y < numOfDonations; y++)

	mov	DWORD PTR _y$33665[ebp], 0
	jmp	SHORT $LN4@ch6_ex2
$LN3@ch6_ex2:
	mov	eax, DWORD PTR _y$33665[ebp]
	add	eax, 1
	mov	DWORD PTR _y$33665[ebp], eax
$LN4@ch6_ex2:
	cmp	DWORD PTR _y$33665[ebp], 10		; 0000000aH
	jge	$LN2@ch6_ex2

; 97   : 	{
; 98   : 		if ( donations[y] > (sum / x) )

	fild	DWORD PTR _x$[ebp]
	fdivr	QWORD PTR _sum$[ebp]
	mov	eax, DWORD PTR _y$33665[ebp]
	fcomp	QWORD PTR _donations$[ebp+eax*8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@ch6_ex2

; 99   : 			cout << "Donation from Participant #" << y << " " << donations[y] << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _y$33665[ebp]
	sub	esp, 8
	fld	QWORD PTR _donations$[ebp+ecx*8]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	ebx, esp
	mov	edx, DWORD PTR _y$33665[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@FKPLBHNO@Donation?5from?5Participant?5?$CD?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@ch6_ex2:

; 100  : 	}

	jmp	$LN3@ch6_ex2
$LN2@ch6_ex2:

; 101  : 	cout << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 102  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@ch6_ex2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@ch6_ex2:
	DD	2
	DD	$LN18@ch6_ex2
$LN18@ch6_ex2:
	DD	-100					; ffffff9cH
	DD	80					; 00000050H
	DD	$LN16@ch6_ex2
	DD	-112					; ffffff90H
	DD	4
	DD	$LN17@ch6_ex2
$LN17@ch6_ex2:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN16@ch6_ex2:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
?ch6_ex2@@YAXXZ ENDP					; ch6_ex2
_TEXT	ENDS
PUBLIC	??_C@_0BP@HJLKFCMI@Please?5enter?5a?5c?0?5p?0?5t?0?5or?5g?3?5?$AA@ ; `string'
PUBLIC	??_C@_0CE@KEFPGEKD@Hail?5to?5the?5redskins?0?5hail?5victo@ ; `string'
PUBLIC	??_C@_0BI@GFPHFHOE@A?5Maple?5is?5a?5sto?9o?9ory?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@PIPGAANB@Pianist?5rhymes?5with?4?4?4?4?$DP?6?$AA@ ; `string'
PUBLIC	??_C@_0DB@MAPHKCLI@Carnivores?5unite?5against?5the?5omn@ ; `string'
PUBLIC	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z ; std::operator>><char,std::char_traits<char> >
PUBLIC	??_C@_0CM@PJLLJODB@Please?5enter?5one?5of?5hte?5followin@ ; `string'
PUBLIC	??_C@_0BK@MFLEHCGG@c?$CJ?5carnivore?7?7p?$CJ?5pianist?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@EGPDDIBL@t?$CJ?5tree?7?7?7g?$CJ?5game?6?$AA@ ; `string'
;	COMDAT ??_C@_0BP@HJLKFCMI@Please?5enter?5a?5c?0?5p?0?5t?0?5or?5g?3?5?$AA@
CONST	SEGMENT
??_C@_0BP@HJLKFCMI@Please?5enter?5a?5c?0?5p?0?5t?0?5or?5g?3?5?$AA@ DB 'Pl'
	DB	'ease enter a c, p, t, or g: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KEFPGEKD@Hail?5to?5the?5redskins?0?5hail?5victo@
CONST	SEGMENT
??_C@_0CE@KEFPGEKD@Hail?5to?5the?5redskins?0?5hail?5victo@ DB 'Hail to th'
	DB	'e redskins, hail victory', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GFPHFHOE@A?5Maple?5is?5a?5sto?9o?9ory?6?$AA@
CONST	SEGMENT
??_C@_0BI@GFPHFHOE@A?5Maple?5is?5a?5sto?9o?9ory?6?$AA@ DB 'A Maple is a s'
	DB	'to-o-ory', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PIPGAANB@Pianist?5rhymes?5with?4?4?4?4?$DP?6?$AA@
CONST	SEGMENT
??_C@_0BK@PIPGAANB@Pianist?5rhymes?5with?4?4?4?4?$DP?6?$AA@ DB 'Pianist r'
	DB	'hymes with....?', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MAPHKCLI@Carnivores?5unite?5against?5the?5omn@
CONST	SEGMENT
??_C@_0DB@MAPHKCLI@Carnivores?5unite?5against?5the?5omn@ DB 'Carnivores u'
	DB	'nite against the omnivore heathens!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PJLLJODB@Please?5enter?5one?5of?5hte?5followin@
CONST	SEGMENT
??_C@_0CM@PJLLJODB@Please?5enter?5one?5of?5hte?5followin@ DB 'Please ente'
	DB	'r one of hte following choices:', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MFLEHCGG@c?$CJ?5carnivore?7?7p?$CJ?5pianist?6?$AA@
CONST	SEGMENT
??_C@_0BK@MFLEHCGG@c?$CJ?5carnivore?7?7p?$CJ?5pianist?6?$AA@ DB 'c) carni'
	DB	'vore', 09H, 09H, 'p) pianist', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EGPDDIBL@t?$CJ?5tree?7?7?7g?$CJ?5game?6?$AA@
CONST	SEGMENT
??_C@_0BD@EGPDDIBL@t?$CJ?5tree?7?7?7g?$CJ?5game?6?$AA@ DB 't) tree', 09H, 09H
	DB	09H, 'g) game', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch6_ex3@@YAXXZ
_TEXT	SEGMENT
tv88 = -220						; size = 4
$T40868 = -212						; size = 4
_choice$ = -5						; size = 1
?ch6_ex3@@YAXXZ PROC					; ch6_ex3, COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	char choice;
; 106  : 	
; 107  : 	cout << "Please enter one of hte following choices:\n"
; 108  : 		 << "c) carnivore\t\tp) pianist\n"
; 109  : 		 << "t) tree\t\t\tg) game\n";

	push	OFFSET ??_C@_0BD@EGPDDIBL@t?$CJ?5tree?7?7?7g?$CJ?5game?6?$AA@
	push	OFFSET ??_C@_0BK@MFLEHCGG@c?$CJ?5carnivore?7?7p?$CJ?5pianist?6?$AA@
	push	OFFSET ??_C@_0CM@PJLLJODB@Please?5enter?5one?5of?5hte?5followin@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN9@ch6_ex3:

; 110  : 	
; 111  : 	while (cin >> choice)

	lea	eax, DWORD PTR _choice$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z ; std::operator>><char,std::char_traits<char> >
	add	esp, 8
	mov	DWORD PTR $T40868[ebp], eax
	mov	edx, DWORD PTR $T40868[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40868[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN8@ch6_ex3

; 112  : 	{
; 113  : 		switch (choice)

	movsx	eax, BYTE PTR _choice$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	sub	ecx, 99					; 00000063H
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 17			; 00000011H
	ja	SHORT $LN1@ch6_ex3
	mov	edx, DWORD PTR tv88[ebp]
	movzx	eax, BYTE PTR $LN12@ch6_ex3[edx]
	jmp	DWORD PTR $LN16@ch6_ex3[eax*4]
$LN5@ch6_ex3:

; 114  : 		{
; 115  : 			case 'c': 
; 116  : 			{
; 117  : 				cout << "Carnivores unite against the omnivore heathens!\n";

	push	OFFSET ??_C@_0DB@MAPHKCLI@Carnivores?5unite?5against?5the?5omn@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 118  : 				break;

	jmp	SHORT $LN6@ch6_ex3
$LN4@ch6_ex3:

; 119  : 			}
; 120  : 			case 'p':
; 121  : 			{
; 122  : 				cout << "Pianist rhymes with....?\n";

	push	OFFSET ??_C@_0BK@PIPGAANB@Pianist?5rhymes?5with?4?4?4?4?$DP?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 123  : 				break;

	jmp	SHORT $LN6@ch6_ex3
$LN3@ch6_ex3:

; 124  : 			}
; 125  : 			case 't':
; 126  : 			{
; 127  : 				cout << "A Maple is a sto-o-ory\n";

	push	OFFSET ??_C@_0BI@GFPHFHOE@A?5Maple?5is?5a?5sto?9o?9ory?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 128  : 				break;

	jmp	SHORT $LN6@ch6_ex3
$LN2@ch6_ex3:

; 129  : 			}
; 130  : 			case 'g':
; 131  : 			{
; 132  : 				cout << "Hail to the redskins, hail victory\n";

	push	OFFSET ??_C@_0CE@KEFPGEKD@Hail?5to?5the?5redskins?0?5hail?5victo@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 133  : 				break;

	jmp	SHORT $LN6@ch6_ex3
$LN1@ch6_ex3:

; 134  : 			}
; 135  : 			default:
; 136  : 			{
; 137  : 				cout << "Please enter a c, p, t, or g: ";

	push	OFFSET ??_C@_0BP@HJLKFCMI@Please?5enter?5a?5c?0?5p?0?5t?0?5or?5g?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN6@ch6_ex3:

; 138  : 			}
; 139  : 		}
; 140  : 	}

	jmp	$LN9@ch6_ex3
$LN8@ch6_ex3:

; 141  : 	cout << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ch6_ex3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@ch6_ex3:
	DD	1
	DD	$LN14@ch6_ex3
$LN14@ch6_ex3:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN13@ch6_ex3
$LN13@ch6_ex3:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
	npad	1
$LN16@ch6_ex3:
	DD	$LN5@ch6_ex3
	DD	$LN2@ch6_ex3
	DD	$LN4@ch6_ex3
	DD	$LN3@ch6_ex3
	DD	$LN1@ch6_ex3
$LN12@ch6_ex3:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	3
?ch6_ex3@@YAXXZ ENDP					; ch6_ex3
_TEXT	ENDS
PUBLIC	??_C@_0O@MOKNLCBG@Next?5choice?3?5?$AA@		; `string'
PUBLIC	??_C@_0CE@KOPFBFOG@Please?5select?5between?5the?5choice@ ; `string'
PUBLIC	??_C@_05DHPHLEOJ@Bye?$CB?6?$AA@			; `string'
PUBLIC	??_C@_0CI@CNPCDNFF@Benevolent?5Order?5of?5Programmers?5@ ; `string'
PUBLIC	??_C@_0CJ@PKDGKLEK@a?4?5display?5by?5name?7?7b?4?5display?5b@ ; `string'
PUBLIC	??_C@_0DA@NFEMNCIL@c?4?5display?5by?5bopname?7d?4?5display@ ; `string'
PUBLIC	??_C@_08MDBKFEGL@q?4?5quit?6?$AA@		; `string'
PUBLIC	??_C@_0BE@OGJGLPCI@Enter?5your?5choice?3?5?$AA@	; `string'
PUBLIC	??_C@_0L@EGGONAOK@Mister?5Bop?$AA@		; `string'
PUBLIC	??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@	; `string'
PUBLIC	??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@	; `string'
PUBLIC	??_C@_07DKNFAPLB@Ehhhhh?$CB?$AA@		; `string'
PUBLIC	??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@	; `string'
PUBLIC	??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@		; `string'
PUBLIC	??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@		; `string'
PUBLIC	??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@		; `string'
PUBLIC	??_C@_0N@HJKELKAD@John?5Bopkins?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0O@MOKNLCBG@Next?5choice?3?5?$AA@
CONST	SEGMENT
??_C@_0O@MOKNLCBG@Next?5choice?3?5?$AA@ DB 'Next choice: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KOPFBFOG@Please?5select?5between?5the?5choice@
CONST	SEGMENT
??_C@_0CE@KOPFBFOG@Please?5select?5between?5the?5choice@ DB 'Please selec'
	DB	't between the choices: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHPHLEOJ@Bye?$CB?6?$AA@
CONST	SEGMENT
??_C@_05DHPHLEOJ@Bye?$CB?6?$AA@ DB 'Bye!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CNPCDNFF@Benevolent?5Order?5of?5Programmers?5@
CONST	SEGMENT
??_C@_0CI@CNPCDNFF@Benevolent?5Order?5of?5Programmers?5@ DB 'Benevolent O'
	DB	'rder of Programmers Report', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PKDGKLEK@a?4?5display?5by?5name?7?7b?4?5display?5b@
CONST	SEGMENT
??_C@_0CJ@PKDGKLEK@a?4?5display?5by?5name?7?7b?4?5display?5b@ DB 'a. disp'
	DB	'lay by name', 09H, 09H, 'b. display by title', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NFEMNCIL@c?4?5display?5by?5bopname?7d?4?5display@
CONST	SEGMENT
??_C@_0DA@NFEMNCIL@c?4?5display?5by?5bopname?7d?4?5display@ DB 'c. displa'
	DB	'y by bopname', 09H, 'd. display by preference', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MDBKFEGL@q?4?5quit?6?$AA@
CONST	SEGMENT
??_C@_08MDBKFEGL@q?4?5quit?6?$AA@ DB 'q. quit', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OGJGLPCI@Enter?5your?5choice?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@OGJGLPCI@Enter?5your?5choice?3?5?$AA@ DB 'Enter your choice: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EGGONAOK@Mister?5Bop?$AA@
CONST	SEGMENT
??_C@_0L@EGGONAOK@Mister?5Bop?$AA@ DB 'Mister Bop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@
CONST	SEGMENT
??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@ DB 'Commander in Bop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@
CONST	SEGMENT
??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@ DB 'Lou Bop Menotti III', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DKNFAPLB@Ehhhhh?$CB?$AA@
CONST	SEGMENT
??_C@_07DKNFAPLB@Ehhhhh?$CB?$AA@ DB 'Ehhhhh!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@
CONST	SEGMENT
??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@ DB 'President in Arms', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@
CONST	SEGMENT
??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@ DB 'Joe Boppie', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@
CONST	SEGMENT
??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@ DB 'Sir Bopsalot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@
CONST	SEGMENT
??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@ DB 'CEO Of Bopping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJKELKAD@John?5Bopkins?$AA@
CONST	SEGMENT
??_C@_0N@HJKELKAD@John?5Bopkins?$AA@ DB 'John Bopkins', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ch6_ex4@@YAXXZ
_TEXT	SEGMENT
tv234 = -784						; size = 4
$T40877 = -776						; size = 4
$T40878 = -764						; size = 4
_x$33829 = -560						; size = 4
_x$33820 = -548						; size = 4
_x$33811 = -536						; size = 4
_x$33783 = -524						; size = 4
_bopargh$ = -512					; size = 468
_boparr$ = -36						; size = 4
_strsize$ = -24						; size = 4
_select$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
?ch6_ex4@@YAXXZ PROC					; ch6_ex4, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 784				; 00000310H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-784]
	mov	ecx, 196				; 000000c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 145  : 	char select;
; 146  : 	const int strsize = 50;

	mov	DWORD PTR _strsize$[ebp], 50		; 00000032H

; 147  : 	struct bop {
; 148  : 		char fullname[strsize];
; 149  : 		char title[strsize];
; 150  : 		char bopname[strsize];
; 151  : 		int preference;
; 152  : 	};
; 153  : 
; 154  : 	bop *boparr = new bop[3];

	push	468					; 000001d4H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T40877[ebp], eax
	mov	eax, DWORD PTR $T40877[ebp]
	mov	DWORD PTR _boparr$[ebp], eax

; 155  : 	bop bopargh[3] =
; 156  : 	{ 
; 157  : 		{ "John Bopkins", "CEO Of Bopping", "Sir Bopsalot",	0 },

	mov	eax, DWORD PTR ??_C@_0N@HJKELKAD@John?5Bopkins?$AA@
	mov	DWORD PTR _bopargh$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_0N@HJKELKAD@John?5Bopkins?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+4], ecx
	mov	edx, DWORD PTR ??_C@_0N@HJKELKAD@John?5Bopkins?$AA@+8
	mov	DWORD PTR _bopargh$[ebp+8], edx
	mov	al, BYTE PTR ??_C@_0N@HJKELKAD@John?5Bopkins?$AA@+12
	mov	BYTE PTR _bopargh$[ebp+12], al
	xor	eax, eax
	mov	DWORD PTR _bopargh$[ebp+13], eax
	mov	DWORD PTR _bopargh$[ebp+17], eax
	mov	DWORD PTR _bopargh$[ebp+21], eax
	mov	DWORD PTR _bopargh$[ebp+25], eax
	mov	DWORD PTR _bopargh$[ebp+29], eax
	mov	DWORD PTR _bopargh$[ebp+33], eax
	mov	DWORD PTR _bopargh$[ebp+37], eax
	mov	DWORD PTR _bopargh$[ebp+41], eax
	mov	DWORD PTR _bopargh$[ebp+45], eax
	mov	BYTE PTR _bopargh$[ebp+49], al
	mov	eax, DWORD PTR ??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@
	mov	DWORD PTR _bopargh$[ebp+50], eax
	mov	ecx, DWORD PTR ??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+54], ecx
	mov	edx, DWORD PTR ??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@+8
	mov	DWORD PTR _bopargh$[ebp+58], edx
	mov	ax, WORD PTR ??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@+12
	mov	WORD PTR _bopargh$[ebp+62], ax
	mov	cl, BYTE PTR ??_C@_0P@GFKJEHAK@CEO?5Of?5Bopping?$AA@+14
	mov	BYTE PTR _bopargh$[ebp+64], cl
	xor	eax, eax
	mov	DWORD PTR _bopargh$[ebp+65], eax
	mov	DWORD PTR _bopargh$[ebp+69], eax
	mov	DWORD PTR _bopargh$[ebp+73], eax
	mov	DWORD PTR _bopargh$[ebp+77], eax
	mov	DWORD PTR _bopargh$[ebp+81], eax
	mov	DWORD PTR _bopargh$[ebp+85], eax
	mov	DWORD PTR _bopargh$[ebp+89], eax
	mov	DWORD PTR _bopargh$[ebp+93], eax
	mov	WORD PTR _bopargh$[ebp+97], ax
	mov	BYTE PTR _bopargh$[ebp+99], al
	mov	eax, DWORD PTR ??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@
	mov	DWORD PTR _bopargh$[ebp+100], eax
	mov	ecx, DWORD PTR ??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+104], ecx
	mov	edx, DWORD PTR ??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@+8
	mov	DWORD PTR _bopargh$[ebp+108], edx
	mov	al, BYTE PTR ??_C@_0N@FNCIEMMC@Sir?5Bopsalot?$AA@+12
	mov	BYTE PTR _bopargh$[ebp+112], al
	xor	eax, eax
	mov	DWORD PTR _bopargh$[ebp+113], eax
	mov	DWORD PTR _bopargh$[ebp+117], eax
	mov	DWORD PTR _bopargh$[ebp+121], eax
	mov	DWORD PTR _bopargh$[ebp+125], eax
	mov	DWORD PTR _bopargh$[ebp+129], eax
	mov	DWORD PTR _bopargh$[ebp+133], eax
	mov	DWORD PTR _bopargh$[ebp+137], eax
	mov	DWORD PTR _bopargh$[ebp+141], eax
	mov	DWORD PTR _bopargh$[ebp+145], eax
	mov	BYTE PTR _bopargh$[ebp+149], al
	mov	DWORD PTR _bopargh$[ebp+152], 0

; 158  : 		{ "Joe Boppie", "President in Arms", "Ehhhhh!", 2 },

	mov	eax, DWORD PTR ??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@
	mov	DWORD PTR _bopargh$[ebp+156], eax
	mov	ecx, DWORD PTR ??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+160], ecx
	mov	dx, WORD PTR ??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@+8
	mov	WORD PTR _bopargh$[ebp+164], dx
	mov	al, BYTE PTR ??_C@_0L@IIKGAAPJ@Joe?5Boppie?$AA@+10
	mov	BYTE PTR _bopargh$[ebp+166], al
	push	39					; 00000027H
	push	0
	lea	eax, DWORD PTR _bopargh$[ebp+167]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@
	mov	DWORD PTR _bopargh$[ebp+206], eax
	mov	ecx, DWORD PTR ??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+210], ecx
	mov	edx, DWORD PTR ??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@+8
	mov	DWORD PTR _bopargh$[ebp+214], edx
	mov	eax, DWORD PTR ??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@+12
	mov	DWORD PTR _bopargh$[ebp+218], eax
	mov	cx, WORD PTR ??_C@_0BC@DIIDIBEK@President?5in?5Arms?$AA@+16
	mov	WORD PTR _bopargh$[ebp+222], cx
	xor	eax, eax
	mov	DWORD PTR _bopargh$[ebp+224], eax
	mov	DWORD PTR _bopargh$[ebp+228], eax
	mov	DWORD PTR _bopargh$[ebp+232], eax
	mov	DWORD PTR _bopargh$[ebp+236], eax
	mov	DWORD PTR _bopargh$[ebp+240], eax
	mov	DWORD PTR _bopargh$[ebp+244], eax
	mov	DWORD PTR _bopargh$[ebp+248], eax
	mov	DWORD PTR _bopargh$[ebp+252], eax
	mov	eax, DWORD PTR ??_C@_07DKNFAPLB@Ehhhhh?$CB?$AA@
	mov	DWORD PTR _bopargh$[ebp+256], eax
	mov	ecx, DWORD PTR ??_C@_07DKNFAPLB@Ehhhhh?$CB?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+260], ecx
	push	42					; 0000002aH
	push	0
	lea	eax, DWORD PTR _bopargh$[ebp+264]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bopargh$[ebp+308], 2

; 159  : 		{ "Lou Bop Menotti III", "Commander in Bop", "Mister Bop", 1}

	mov	eax, DWORD PTR ??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@
	mov	DWORD PTR _bopargh$[ebp+312], eax
	mov	ecx, DWORD PTR ??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+316], ecx
	mov	edx, DWORD PTR ??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@+8
	mov	DWORD PTR _bopargh$[ebp+320], edx
	mov	eax, DWORD PTR ??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@+12
	mov	DWORD PTR _bopargh$[ebp+324], eax
	mov	ecx, DWORD PTR ??_C@_0BE@HOOPCGNN@Lou?5Bop?5Menotti?5III?$AA@+16
	mov	DWORD PTR _bopargh$[ebp+328], ecx
	xor	eax, eax
	mov	DWORD PTR _bopargh$[ebp+332], eax
	mov	DWORD PTR _bopargh$[ebp+336], eax
	mov	DWORD PTR _bopargh$[ebp+340], eax
	mov	DWORD PTR _bopargh$[ebp+344], eax
	mov	DWORD PTR _bopargh$[ebp+348], eax
	mov	DWORD PTR _bopargh$[ebp+352], eax
	mov	DWORD PTR _bopargh$[ebp+356], eax
	mov	WORD PTR _bopargh$[ebp+360], ax
	mov	eax, DWORD PTR ??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@
	mov	DWORD PTR _bopargh$[ebp+362], eax
	mov	ecx, DWORD PTR ??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+366], ecx
	mov	edx, DWORD PTR ??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@+8
	mov	DWORD PTR _bopargh$[ebp+370], edx
	mov	eax, DWORD PTR ??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@+12
	mov	DWORD PTR _bopargh$[ebp+374], eax
	mov	cl, BYTE PTR ??_C@_0BB@FICOCABB@Commander?5in?5Bop?$AA@+16
	mov	BYTE PTR _bopargh$[ebp+378], cl
	xor	eax, eax
	mov	DWORD PTR _bopargh$[ebp+379], eax
	mov	DWORD PTR _bopargh$[ebp+383], eax
	mov	DWORD PTR _bopargh$[ebp+387], eax
	mov	DWORD PTR _bopargh$[ebp+391], eax
	mov	DWORD PTR _bopargh$[ebp+395], eax
	mov	DWORD PTR _bopargh$[ebp+399], eax
	mov	DWORD PTR _bopargh$[ebp+403], eax
	mov	DWORD PTR _bopargh$[ebp+407], eax
	mov	BYTE PTR _bopargh$[ebp+411], al
	mov	eax, DWORD PTR ??_C@_0L@EGGONAOK@Mister?5Bop?$AA@
	mov	DWORD PTR _bopargh$[ebp+412], eax
	mov	ecx, DWORD PTR ??_C@_0L@EGGONAOK@Mister?5Bop?$AA@+4
	mov	DWORD PTR _bopargh$[ebp+416], ecx
	mov	dx, WORD PTR ??_C@_0L@EGGONAOK@Mister?5Bop?$AA@+8
	mov	WORD PTR _bopargh$[ebp+420], dx
	mov	al, BYTE PTR ??_C@_0L@EGGONAOK@Mister?5Bop?$AA@+10
	mov	BYTE PTR _bopargh$[ebp+422], al
	push	39					; 00000027H
	push	0
	lea	eax, DWORD PTR _bopargh$[ebp+423]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bopargh$[ebp+464], 1

; 160  : 	};
; 161  : 
; 162  : 	cout << "Benevolent Order of Programmers Report\n"
; 163  : 		 << "a. display by name\t\tb. display by title\n"
; 164  : 		 << "c. display by bopname\td. display by preference\n"
; 165  : 		 << "q. quit\n"
; 166  : 	     << "Enter your choice: ";

	push	OFFSET ??_C@_0BE@OGJGLPCI@Enter?5your?5choice?3?5?$AA@
	push	OFFSET ??_C@_08MDBKFEGL@q?4?5quit?6?$AA@
	push	OFFSET ??_C@_0DA@NFEMNCIL@c?4?5display?5by?5bopname?7d?4?5display@
	push	OFFSET ??_C@_0CJ@PKDGKLEK@a?4?5display?5by?5name?7?7b?4?5display?5b@
	push	OFFSET ??_C@_0CI@CNPCDNFF@Benevolent?5Order?5of?5Programmers?5@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN27@ch6_ex4:

; 167  : 
; 168  : 	while ((cin >> select) && select != 'q')

	lea	eax, DWORD PTR _select$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z ; std::operator>><char,std::char_traits<char> >
	add	esp, 8
	mov	DWORD PTR $T40878[ebp], eax
	mov	edx, DWORD PTR $T40878[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T40878[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_??Bios_base@std@@QBEPAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN26@ch6_ex4
	movsx	eax, BYTE PTR _select$[ebp]
	cmp	eax, 113				; 00000071H
	je	$LN26@ch6_ex4

; 169  : 	{
; 170  : 		switch (select)

	movsx	eax, BYTE PTR _select$[ebp]
	mov	DWORD PTR tv234[ebp], eax
	mov	ecx, DWORD PTR tv234[ebp]
	sub	ecx, 65					; 00000041H
	mov	DWORD PTR tv234[ebp], ecx
	cmp	DWORD PTR tv234[ebp], 48		; 00000030H
	ja	$LN1@ch6_ex4
	mov	edx, DWORD PTR tv234[ebp]
	movzx	eax, BYTE PTR $LN30@ch6_ex4[edx]
	jmp	DWORD PTR $LN35@ch6_ex4[eax*4]
$LN23@ch6_ex4:

; 171  : 		{
; 172  : 			case 'A':
; 173  : 			case 'a':
; 174  : 			{
; 175  : 				for (int x = 0; x < 3; x++)

	mov	DWORD PTR _x$33783[ebp], 0
	jmp	SHORT $LN22@ch6_ex4
$LN21@ch6_ex4:
	mov	eax, DWORD PTR _x$33783[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33783[ebp], eax
$LN22@ch6_ex4:
	cmp	DWORD PTR _x$33783[ebp], 3
	jge	SHORT $LN20@ch6_ex4

; 176  : 					cout << bopargh[x].fullname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33783[ebp]
	imul	ecx, 156				; 0000009cH
	lea	edx, DWORD PTR _bopargh$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN21@ch6_ex4
$LN20@ch6_ex4:

; 177  : 				break;

	jmp	$LN24@ch6_ex4
$LN19@ch6_ex4:

; 178  : 			}
; 179  : 			case 'B':
; 180  : 			case 'b':
; 181  : 			{
; 182  : 				for (int x = 0; x < 3; x++)

	mov	DWORD PTR _x$33811[ebp], 0
	jmp	SHORT $LN18@ch6_ex4
$LN17@ch6_ex4:
	mov	eax, DWORD PTR _x$33811[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33811[ebp], eax
$LN18@ch6_ex4:
	cmp	DWORD PTR _x$33811[ebp], 3
	jge	SHORT $LN16@ch6_ex4

; 183  : 					cout << bopargh[x].title << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33811[ebp]
	imul	ecx, 156				; 0000009cH
	lea	edx, DWORD PTR _bopargh$[ebp+ecx+50]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN17@ch6_ex4
$LN16@ch6_ex4:

; 184  : 				break;

	jmp	$LN24@ch6_ex4
$LN15@ch6_ex4:

; 185  : 			}
; 186  : 			case 'C':
; 187  : 			case 'c':
; 188  : 			{
; 189  : 				for (int x = 0; x < 3; x++)

	mov	DWORD PTR _x$33820[ebp], 0
	jmp	SHORT $LN14@ch6_ex4
$LN13@ch6_ex4:
	mov	eax, DWORD PTR _x$33820[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33820[ebp], eax
$LN14@ch6_ex4:
	cmp	DWORD PTR _x$33820[ebp], 3
	jge	SHORT $LN12@ch6_ex4

; 190  : 					cout << bopargh[x].bopname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33820[ebp]
	imul	ecx, 156				; 0000009cH
	lea	edx, DWORD PTR _bopargh$[ebp+ecx+100]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN13@ch6_ex4
$LN12@ch6_ex4:

; 191  : 				break;

	jmp	$LN24@ch6_ex4
$LN11@ch6_ex4:

; 192  : 			}
; 193  : 			case 'D':
; 194  : 			case 'd':
; 195  : 			{
; 196  : 				for (int x = 0; x < 3; x++)

	mov	DWORD PTR _x$33829[ebp], 0
	jmp	SHORT $LN10@ch6_ex4
$LN9@ch6_ex4:
	mov	eax, DWORD PTR _x$33829[ebp]
	add	eax, 1
	mov	DWORD PTR _x$33829[ebp], eax
$LN10@ch6_ex4:
	cmp	DWORD PTR _x$33829[ebp], 3
	jge	$LN8@ch6_ex4

; 197  : 				{
; 198  : 					if (bopargh[x].preference == 0)

	mov	eax, DWORD PTR _x$33829[ebp]
	imul	eax, 156				; 0000009cH
	cmp	DWORD PTR _bopargh$[ebp+eax+152], 0
	jne	SHORT $LN7@ch6_ex4

; 199  : 						cout << bopargh[x].fullname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33829[ebp]
	imul	ecx, 156				; 0000009cH
	lea	edx, DWORD PTR _bopargh$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@ch6_ex4
$LN7@ch6_ex4:

; 200  : 					else if (bopargh[x].preference == 1)

	mov	eax, DWORD PTR _x$33829[ebp]
	imul	eax, 156				; 0000009cH
	cmp	DWORD PTR _bopargh$[ebp+eax+152], 1
	jne	SHORT $LN5@ch6_ex4

; 201  : 						cout << bopargh[x].title << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33829[ebp]
	imul	ecx, 156				; 0000009cH
	lea	edx, DWORD PTR _bopargh$[ebp+ecx+50]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@ch6_ex4
$LN5@ch6_ex4:

; 202  : 					else if (bopargh[x].preference == 2)

	mov	eax, DWORD PTR _x$33829[ebp]
	imul	eax, 156				; 0000009cH
	cmp	DWORD PTR _bopargh$[ebp+eax+152], 2
	jne	SHORT $LN6@ch6_ex4

; 203  : 						cout << bopargh[x].bopname << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR _x$33829[ebp]
	imul	ecx, 156				; 0000009cH
	lea	edx, DWORD PTR _bopargh$[ebp+ecx+100]
	push	edx
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ch6_ex4:

; 204  : 				}

	jmp	$LN9@ch6_ex4
$LN8@ch6_ex4:

; 205  : 				break;

	jmp	SHORT $LN24@ch6_ex4
$LN2@ch6_ex4:

; 206  : 			}
; 207  : 			case 'Q':
; 208  : 			case 'q':
; 209  : 			{
; 210  : 				cout << "Bye!\n";

	push	OFFSET ??_C@_05DHPHLEOJ@Bye?$CB?6?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 211  : 				break;

	jmp	SHORT $LN24@ch6_ex4
$LN1@ch6_ex4:

; 212  : 			}
; 213  : 			default:
; 214  : 				cout << "Please select between the choices: ";

	push	OFFSET ??_C@_0CE@KOPFBFOG@Please?5select?5between?5the?5choice@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
$LN24@ch6_ex4:

; 215  : 		}
; 216  : 		cout << "Next choice: ";

	push	OFFSET ??_C@_0O@MOKNLCBG@Next?5choice?3?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 217  : 	}

	jmp	$LN27@ch6_ex4
$LN26@ch6_ex4:

; 218  : 	cout << endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 219  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@ch6_ex4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 784				; 00000310H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN34@ch6_ex4:
	DD	2
	DD	$LN33@ch6_ex4
$LN33@ch6_ex4:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN31@ch6_ex4
	DD	-512					; fffffe00H
	DD	468					; 000001d4H
	DD	$LN32@ch6_ex4
$LN32@ch6_ex4:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	0
$LN31@ch6_ex4:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN35@ch6_ex4:
	DD	$LN23@ch6_ex4
	DD	$LN19@ch6_ex4
	DD	$LN15@ch6_ex4
	DD	$LN11@ch6_ex4
	DD	$LN2@ch6_ex4
	DD	$LN1@ch6_ex4
$LN30@ch6_ex4:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	0
	DB	1
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?ch6_ex4@@YAXXZ ENDP					; ch6_ex4
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ch6_ex5@@YAXXZ
_TEXT	SEGMENT
?ch6_ex5@@YAXXZ PROC					; ch6_ex5, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 222  : 
; 223  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ch6_ex5@@YAXXZ ENDP					; ch6_ex5
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ch6_ex6@@YAXXZ
_TEXT	SEGMENT
?ch6_ex6@@YAXXZ PROC					; ch6_ex6, COMDAT

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 226  : 
; 227  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ch6_ex6@@YAXXZ ENDP					; ch6_ex6
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ch6_ex7@@YAXXZ
_TEXT	SEGMENT
?ch6_ex7@@YAXXZ PROC					; ch6_ex7, COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 230  : 
; 231  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ch6_ex7@@YAXXZ ENDP					; ch6_ex7
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ch6_ex8@@YAXXZ
_TEXT	SEGMENT
?ch6_ex8@@YAXXZ PROC					; ch6_ex8, COMDAT

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 234  : 
; 235  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ch6_ex8@@YAXXZ ENDP					; ch6_ex8
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ch6_ex9@@YAXXZ
_TEXT	SEGMENT
?ch6_ex9@@YAXXZ PROC					; ch6_ex9, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 238  : 
; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ch6_ex9@@YAXXZ ENDP					; ch6_ex9
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ch6_ex10@@YAXXZ
_TEXT	SEGMENT
?ch6_ex10@@YAXXZ PROC					; ch6_ex10, COMDAT

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 242  : 
; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ch6_ex10@@YAXXZ ENDP					; ch6_ex10
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File d:\tools\dev\vs2010\vc\include\ostream
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -352						; size = 8
tv293 = -345						; size = 1
tv286 = -345						; size = 1
tv345 = -344						; size = 8
tv292 = -344						; size = 4
tv285 = -344						; size = 4
tv291 = -340						; size = 4
tv288 = -340						; size = 8
tv284 = -340						; size = 4
tv331 = -336						; size = 8
tv290 = -336						; size = 4
tv283 = -336						; size = 4
tv287 = -332						; size = 4
tv137 = -332						; size = 4
tv289 = -329						; size = 1
tv282 = -329						; size = 1
$T40901 = -324						; size = 4
$T40902 = -312						; size = 4
$T40903 = -300						; size = 4
$T40904 = -288						; size = 4
$T40905 = -276						; size = 4
__Ok$ = -72						; size = 8
__Pad$ = -56						; size = 8
__Count$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv331[ebp], eax
	mov	DWORD PTR tv331[ebp+4], edx
	cmp	DWORD PTR tv331[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	cmp	DWORD PTR tv331[ebp], 0
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv345[ebp], eax
	mov	DWORD PTR tv345[ebp+4], edx
	mov	eax, DWORD PTR tv345[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN26@operator
	mov	ecx, DWORD PTR tv345[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN26@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	DWORD PTR tv135[ebp], 0
	mov	DWORD PTR tv135[ebp+4], 0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	jne	SHORT $LN14@operator

; 777  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 778  : 	else

	jmp	$LN13@operator
$LN14@operator:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator
	jmp	SHORT $LN10@operator
$LN9@operator:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN10@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN27@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN27@operator:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv282[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv283[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv282[ebp]
	push	eax
	mov	ecx, DWORD PTR tv283[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	mov	DWORD PTR $T40901[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv285[ebp], eax
	mov	edx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T40902[ebp], edx
	lea	eax, DWORD PTR $T40901[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40902[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv286[ebp], al
	movzx	edx, BYTE PTR tv286[ebp]
	test	edx, edx
	je	SHORT $LN7@operator

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 787  : 					break;

	jmp	SHORT $LN11@operator
$LN7@operator:

; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit

	jmp	$LN9@operator
$LN11@operator:

; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN28@operator
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN6@operator
$LN28@operator:

; 792  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator
	jmp	SHORT $LN4@operator
$LN3@operator:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN5@operator
	jg	SHORT $LN29@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN5@operator
$LN29@operator:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T40903[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv292[ebp], eax
	mov	edx, DWORD PTR tv292[ebp]
	mov	DWORD PTR $T40904[ebp], edx
	lea	eax, DWORD PTR $T40903[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40904[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv293[ebp], al
	movzx	edx, BYTE PTR tv293[ebp]
	test	edx, edx
	je	SHORT $LN1@operator

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 800  : 					break;

	jmp	SHORT $LN5@operator
$LN1@operator:

; 801  : 					}

	jmp	$LN3@operator
$LN5@operator:

; 802  : 		_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN13@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 807  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T40905[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T40905[ebp]

; 808  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@operator:
	DD	1
	DD	$LN32@operator
$LN32@operator:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN30@operator
$LN30@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\tools\dev\vs2010\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 491  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 492  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 553  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 562  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 563  : 		return (EOF);

	or	eax, -1

; 564  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File d:\tools\dev\vs2010\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 118  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

	mov	esi, esp
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry@2

; 124  : 				this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 132  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1

; 134  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 92   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas:

; 94   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 97   : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@2:

; 100  : 			}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv284 = -353						; size = 1
tv275 = -353						; size = 1
tv283 = -352						; size = 4
tv274 = -352						; size = 4
tv95 = -352						; size = 8
tv279 = -349						; size = 1
tv282 = -348						; size = 4
tv278 = -348						; size = 4
tv273 = -348						; size = 4
tv318 = -344						; size = 8
tv281 = -344						; size = 4
tv277 = -344						; size = 4
tv272 = -344						; size = 4
tv276 = -340						; size = 4
tv65 = -340						; size = 4
tv280 = -337						; size = 1
tv271 = -337						; size = 1
$T40965 = -332						; size = 4
$T40966 = -320						; size = 4
$T40967 = -308						; size = 4
$T40968 = -296						; size = 4
$T40969 = -284						; size = 4
$T40970 = -272						; size = 4
$T40971 = -260						; size = 4
__Pad$38118 = -56					; size = 8
__Ok$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 813  : 	{	// insert a char into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-356]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 814  : 	typedef char _Elem;
; 815  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 816  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 817  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 818  : 
; 819  : 	if (_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	je	$LN12@operator@2

; 820  : 		{	// state okay, insert
; 821  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv318[ebp], eax
	mov	DWORD PTR tv318[ebp+4], edx
	cmp	DWORD PTR tv318[ebp+4], 0
	jg	SHORT $LN15@operator@2
	jl	SHORT $LN23@operator@2
	cmp	DWORD PTR tv318[ebp], 1
	ja	SHORT $LN15@operator@2
$LN23@operator@2:
	mov	DWORD PTR tv95[ebp], 0
	mov	DWORD PTR tv95[ebp+4], 0
	jmp	SHORT $LN16@operator@2
$LN15@operator@2:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	sbb	edx, 0
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], edx
$LN16@operator@2:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR __Pad$38118[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp+4]
	mov	DWORD PTR __Pad$38118[ebp+4], ecx

; 822  : 
; 823  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 824  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN10@operator@2
	jmp	SHORT $LN9@operator@2
$LN8@operator@2:

; 825  : 			for (; _State == ios_base::goodbit && 0 < _Pad;
; 826  : 				--_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$38118[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$38118[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$38118[ebp], eax
	mov	DWORD PTR __Pad$38118[ebp+4], ecx
$LN9@operator@2:
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN10@operator@2
	cmp	DWORD PTR __Pad$38118[ebp+4], 0
	jl	$LN10@operator@2
	jg	SHORT $LN24@operator@2
	cmp	DWORD PTR __Pad$38118[ebp], 0
	jbe	$LN10@operator@2
$LN24@operator@2:

; 827  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 828  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv271[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv272[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv271[ebp]
	push	eax
	mov	ecx, DWORD PTR tv272[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv273[ebp], eax
	mov	ecx, DWORD PTR tv273[ebp]
	mov	DWORD PTR $T40965[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv274[ebp], eax
	mov	edx, DWORD PTR tv274[ebp]
	mov	DWORD PTR $T40966[ebp], edx
	lea	eax, DWORD PTR $T40965[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40966[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv275[ebp], al
	movzx	edx, BYTE PTR tv275[ebp]
	test	edx, edx
	je	SHORT $LN6@operator@2

; 829  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator@2:

; 830  : 
; 831  : 		if (_State == ios_base::goodbit

	jmp	$LN8@operator@2
$LN10@operator@2:

; 832  : 			&& _Traits::eq_int_type(_Traits::eof(),
; 833  : 				_Ostr.rdbuf()->sputc(_Ch)))

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator@2
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv276[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv276[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv277[ebp], eax
	mov	ecx, DWORD PTR tv277[ebp]
	mov	DWORD PTR $T40967[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv278[ebp], eax
	mov	edx, DWORD PTR tv278[ebp]
	mov	DWORD PTR $T40968[ebp], edx
	lea	eax, DWORD PTR $T40967[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40968[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv279[ebp], al
	movzx	edx, BYTE PTR tv279[ebp]
	test	edx, edx
	je	SHORT $LN5@operator@2

; 834  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN5@operator@2:

; 835  : 
; 836  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

	jmp	SHORT $LN4@operator@2
$LN3@operator@2:

; 837  : 			--_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$38118[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$38118[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$38118[ebp], eax
	mov	DWORD PTR __Pad$38118[ebp+4], ecx
$LN4@operator@2:
	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN2@operator@2
	cmp	DWORD PTR __Pad$38118[ebp+4], 0
	jl	$LN2@operator@2
	jg	SHORT $LN25@operator@2
	cmp	DWORD PTR __Pad$38118[ebp], 0
	jbe	$LN2@operator@2
$LN25@operator@2:

; 838  : 			if (_Traits::eq_int_type(_Traits::eof(),
; 839  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv280[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv281[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv280[ebp]
	push	eax
	mov	ecx, DWORD PTR tv281[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv282[ebp], eax
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR $T40969[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv283[ebp], eax
	mov	edx, DWORD PTR tv283[ebp]
	mov	DWORD PTR $T40970[ebp], edx
	lea	eax, DWORD PTR $T40969[ebp]
	push	eax
	lea	ecx, DWORD PTR $T40970[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv284[ebp], al
	movzx	edx, BYTE PTR tv284[ebp]
	test	edx, edx
	je	SHORT $LN1@operator@2

; 840  : 				_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN1@operator@2:

; 841  : 		_CATCH_IO_(_Ostr)

	jmp	$LN3@operator@2
$LN2@operator@2:
	jmp	SHORT $LN17@operator@2
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:
	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN12@operator@2
	ret	0
$LN17@operator@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator@2:

; 842  : 		}
; 843  : 
; 844  : 	_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 845  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 846  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T40971[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T40971[ebp]

; 847  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@operator@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 356				; 00000164H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@operator@2:
	DD	1
	DD	$LN28@operator@2
$LN28@operator@2:
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN26@operator@2
$LN26@operator@2:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z ; std::operator>><char,std::char_traits<char> >
PUBLIC	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\tools\dev\vs2010\vc\include\istream
;	COMDAT ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Ch$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z PROC ; std::operator>><char,std::char_traits<char> >, COMDAT

; 1092 : 	{	// extract a character

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1093 : 	return (_STD move(_Istr) >> _Ch);

	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Istr$[ebp]
	push	ecx
	call	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
	add	esp, 4
	push	eax
	call	??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z ; std::operator>><char,std::char_traits<char> >
	add	esp, 8

; 1094 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z ENDP ; std::operator>><char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\tools\dev\vs2010\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > &>, COMDAT

; 86   : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > &>
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
;	COMDAT xdata$x
; File d:\tools\dev\vs2010\vc\include\istream
xdata$x	SEGMENT
__catchsym$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z$0
__tryblocktable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z$3
__unwindtable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z
_TEXT	SEGMENT
tv153 = -280						; size = 4
tv155 = -277						; size = 1
tv154 = -276						; size = 4
tv65 = -276						; size = 4
tv156 = -273						; size = 1
$T40998 = -268						; size = 4
$T40999 = -256						; size = 4
__Ok$ = -52						; size = 8
__State$ = -36						; size = 4
__Meta$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Ch$ = 12						; size = 4
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z PROC ; std::operator>><char,std::char_traits<char> >, COMDAT

; 1030 : 	{	// extract a character

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1031 : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 1032 : 
; 1033 : 	typename _Myis::int_type _Meta;
; 1034 : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 1035 : 	const typename _Myis::sentry _Ok(_Istr);

	push	0
	mov	eax, DWORD PTR __Istr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1036 : 
; 1037 : 	if (_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	je	$LN4@operator@3

; 1038 : 		{	// state okay, extract characters
; 1039 : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 1040 : 		_Meta = _Istr.rdbuf()->sbumpc();

	mov	eax, DWORD PTR __Istr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Istr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv65[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv65[ebp]
	call	DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR tv153[ebp]
	mov	DWORD PTR __Meta$[ebp], eax

; 1041 : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv154[ebp], eax
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T40998[ebp], eax
	lea	ecx, DWORD PTR __Meta$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T40998[ebp]
	push	edx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv155[ebp], al
	movzx	eax, BYTE PTR tv155[ebp]
	test	eax, eax
	je	SHORT $LN2@operator@3

; 1042 : 			_State |= ios_base::eofbit | ios_base::failbit;	// end of file

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 3
	mov	DWORD PTR __State$[ebp], eax

; 1043 : 		else

	jmp	SHORT $LN1@operator@3
$LN2@operator@3:

; 1044 : 			_Ch = _Traits::to_char_type(_Meta);	// got a character

	lea	eax, DWORD PTR __Meta$[ebp]
	push	eax
	call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
	add	esp, 4
	mov	BYTE PTR tv156[ebp], al
	mov	ecx, DWORD PTR __Ch$[ebp]
	mov	dl, BYTE PTR tv156[ebp]
	mov	BYTE PTR [ecx], dl
$LN1@operator@3:
	jmp	SHORT $LN7@operator@3
__catch$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z$0:

; 1045 : 		_CATCH_IO_(_Istr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Istr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Istr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN4@operator@3
	ret	0
$LN7@operator@3:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN4@operator@3:

; 1046 : 		}
; 1047 : 
; 1048 : 	_Istr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Istr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Istr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1049 : 	return (_Istr);

	mov	eax, DWORD PTR __Istr$[ebp]
	mov	DWORD PTR $T40999[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR $T40999[ebp]

; 1050 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@operator@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@operator@3:
	DD	2
	DD	$LN16@operator@3
$LN16@operator@3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@operator@3
	DD	-52					; ffffffccH
	DD	8
	DD	$LN14@operator@3
$LN14@operator@3:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
$LN13@operator@3:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAD@Z ENDP ; std::operator>><char,std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\tools\dev\vs2010\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 541  : 		{	// convert metacharacter to character

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 542  : 		return ((_Elem)_Meta);

	mov	eax, DWORD PTR __Meta$[ebp]
	mov	al, BYTE PTR [eax]

; 543  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
;	COMDAT xdata$x
; File d:\tools\dev\vs2010\vc\include\istream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 99   : 			{	// construct locking and calling _Ipfx

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Istr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 100  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

	mov	esi, esp
	movzx	eax, BYTE PTR __Noskip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], al

; 101  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 104  : 			{	// test if _Ipfx succeeded

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1

; 106  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 			if (_Myistr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@3

; 84   : 				_Myistr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@3:

; 85   : 			}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 76   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Istr$[ebp]
	mov	DWORD PTR [eax], ecx

; 77   : 			if (_Myistr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@4

; 78   : 				_Myistr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@4:

; 79   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
END
